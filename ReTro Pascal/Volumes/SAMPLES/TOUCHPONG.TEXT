
(* pong with touch input for Retro Pascal ][ -- Frank Seide, 2013 *)

program pong;
  
  uses turtlegraphics,applestuff,retrostuff;
  
  const invspeed = 100.0;       (* ball speed *)
  
  type rect = record x,y,w,h: real end;
       vec = record x,y: real end;
       
  var screen,field: rect;                   (* dimensions *)
      hmargin,vmargin: real;
      padwidth,padheight,ballsize: real;
      left,right,ball: rect;                (* element state *)
      leftv,rightv,ballv: vec;
      oldleft,oldright,oldball: rect;
      cleft,cright: real;                   (* controller *)
      leftscore,rightscore: integer;        (* player scores *)
      dummy: integer;

  (* rectangle and vector type *)      
  procedure setrect(var r: rect; x,y,w,h: real);
  begin
    r.x:=x; r.y:=y; r.w:=w; r.h:=h
  end;
  
  procedure setvec(var v: vec; x,y: real);
  begin
    v.x:=x; v.y:=y
  end;
  
  procedure moverect(var r: rect; d: vec);
  begin
    r.x:=r.x+d.x; r.y:=r.y+d.y;
  end;
  
  function intersect(var a,b: rect): boolean;
  begin
    intersect:=(a.x<b.x+b.w) and (b.x<a.x+a.w) and (a.y<b.y+b.h) and (b.y<a.y+a.h)
  end;
  
  (* reading the touch input through PADDLE/BUTTON *)
  (* TODO: better remember the touch-down position, so one can "grab" the paddle *)
  procedure readcontrollers;
    var p0,p1,p2,p3: integer;
        b0,b3: boolean;
    procedure swap(var a,b: integer);
      var t: integer;
    begin
      t:=a; a:=b; b:=t
    end;
  begin
    b0:=button(0); b3:=button(3);
    p0:=paddle(0); p1:=paddle(1); p2:=paddle(2); p3:=paddle(3);
    if b0 and b3 then begin
      if p0>p2 then begin swap(p0,p2); swap(p1,p3) end;
      if p0<128 then cleft:=p1;
      if p2>128 then cright :=p3;
    end
    else if b0 then if p0<128 then cleft:=p1 else cright:=p1
    else if b3 then if p2<128 then cleft:=p3 else cright:=p3
  end;
  
  (* per-frame game state update *)
  procedure steppaddle(var p: rect; var v: vec; c: real);
    var targety: real;
  begin
    targety:=round(c/256.0*(field.h-p.h))+field.y;
    v.y:=v.y*0.5+(targety-p.y)*0.5;
    p.y:=p.y+v.y;
  end;

  (* BUGBUG: sometimes gets caught in the paddle *)
  procedure stepball;
  begin
    moverect(ball,ballv);
    if intersect(ball,left) then begin
      ballv.x:=-ballv.x; ballv.y:=ballv.y*0.8+leftv.y*0.8;
      note(84,-30)
    end
    else if intersect(ball,right) then begin
      ballv.x:=-ballv.x; ballv.y:=ballv.y*0.8+rightv.y*0.8;
      note(80,-30)
    end
    else if (ball.y<0) or (ball.y+ball.h>=screen.h) then begin
      ballv.y:=-ballv.y;
      note(48,-30)
    end;
    (* limit the vertical speed *)
    if abs(ballv.y)>abs(ballv.x) then
      ballv.y:=ballv.y/abs(ballv.y)*abs(ballv.x)
  end;
  
  (* drawing *)
  procedure drawbox(r: rect; show: boolean);
  begin
    viewport(round(r.x),round(r.x+r.w-1),round(r.y),round(r.y+r.h-1));
    if show then fillscreem(white) else fillscreen(black);
    viewport(0,maxint,0,maxint);
  end;
  
  procedure drawscores;
  begin
chartype(scalemode(9)+10+16{use PENCOLOR});
    pencolor(none); moveto(round(field.x+field.w*0.1),round(screen.y+screen.h*4/5));
    pencolor(violet); wchar(chr(leftscore+48));
    pencolor(none); moveto(round(field.x+field.w*0.9),round(screen.y+screen.h*4/5));
    pencolor(violet); wchar(chr(rightscore+48));
    chartype(10);
  end;
  
  procedure drawmessage(msg: string);
    const scale = 3;            (* text scaling *)
    var w: integer;
  begin
    w:=7*scale*length(msg);
    pencolor(none); moveto(round((screen.w-w)/2),round(screen.h*0.7));
    (* draw box around it? *)
    chartype(scalemode(scale)+10);
    wstring(msg);
    chartype(10);
  end;

  procedure renderframe;
  begin
    (* hold frame buffer (double-buffered drawing) *)
    holdframe(true);
    (* undraw movable objects *)
    drawbox(oldleft,false);
    drawbox(oldright,false);
    drawbox(oldball,false);
    (* redraw playing field and scores, since undraw may have erased something *)
    pencolor(none); moveto(round(field.x+field.w/2),round(screen.y));
    pencolor(orange); moveto(round(field.x+field.w/2),round(screen.y+screen.h));
    drawscores;
    (* draw movable objects *)
    drawbox(ball,true);
    drawbox(left,true);
    drawbox(right,true);
    (* release the frame bufer *)
    holdframe(false);
    (* keep old object positions for undrawing *)
    oldleft:=left; oldright:=right; oldball:=ball;
  end;
  
  (* ball was out *)
  procedure out(var score: integer; var paddle: rect; which: integer);
    var msg: string;
        i: integer;
  begin
    (* count the score *)
    score:=score+1;
    (* the message to show *)
    msg:='point for '; 
    if which<0 then msg:=concat(msg,'left') else msg:=concat(msg,'right');
    msg:=concat(msg,' player');
    (* sound *)
    for i:=0 to 10 do note(60-2*i, 30);
    (* reduced game loop for 1 seconds to show message *)
    for i:=0 to 1000 div 15 do begin
      readcontrollers;
      steppaddle(left,leftv,cleft); steppaddle(right,rightv,cright);
      renderframe;
      drawmessage(msg);
      yieldcpu(15);   (* some delay until next frame *)
      if keypressed then exit(out);
    end;
    (* erase message *)
    drawmessage('                      ');
    (* reset ball to player paddle (keeping same speed) *)
    ball.x:=paddle.x-1.1*which*ball.w;
    ball.y:=paddle.y+(paddle.h-ball.h);
  end;

(* main program *)
begin
  page(output);
  note(72,-200); yieldcpu(50); note(72+4,-150); yieldcpu(50); note(72+7,-100);
  writeln; writeln('Welcome to Pong!');
  writeln; writeln('Use touch to move the controllers.');
  writeln; write('Hit ENTER to begin'); readln;

  (* init graphics *)
  viewport(0,maxint,0,maxint);  (* enable native resolution *)
  initturtle;
  setrect(screen,0,0,turtlex*2,turtley*2);  (* get actual size *)
  
  (* init the game *)
  hmargin:=screen.w/14; vmargin:=0;
  setrect(field,screen.x+hmargin,screen.y+vmargin,
          screen.w-2*hmargin,screen.h-2*vmargin);
  
  padwidth:=screen.w/40; padheight:=screen.h/4;     (* paddles *)
  setrect(left,field.x,(field.h-padheight)/2,padwidth,padheight);
  setrect(right,field.x+field.w-padwidth,left.y,left.w,left.h);
  setvec(leftv,0,0); rightv:=leftv;

  cleft:=128; cright:=128;                          (* controllers *)
  
  ballsize:=padwidth;                               (* ball *)
  setrect(ball,field.x+field.w/2,field.y+field.h/2,ballsize,ballsize);
  randomize;
  setvec(ballv,(random div 16384*2-1)*(screen.w/invspeed),  (* random side *)
               (random-16384)/16383.0*(screen.h/190));      (* random angle *)
  
  (* game loop *)
  leftscore:=0; rightscore:=0;
  repeat
    (* read touch positions *)
    readcontrollers;
    (* per-frame state update *)
    steppaddle(left,leftv,cleft); steppaddle(right,rightv,cright);
    stepball;
    (* check if ball has gone out *)
    if (ball.x<0) then out(rightscore,right,1)
    else if (ball.x+ball.w>=screen.w) then out(leftscore,left,-1);
    (* draw field *)
    renderframe;
    dummy:=syncframe;      (* some delay until next frame *)
  until keypress;

  textmode;
  writeln; writeln('That''s all, folks!');
  yieldcpu(1000);
end.
