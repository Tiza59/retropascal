
(* --- SYSSEGS.A  --- *)

    (******************************************************************)
    (*                                                                *)
    (*  Copyright (c) 1978 Regents of the University of California.   *)
    (*  Permission to copy or distribute this software or documen-    *)
    (*  tation in hard or soft copy granted only by written license   *) 
    (*  obtained from the Institute for Information Systems.          *)
    (*                                                                *)
    (******************************************************************)
    
SEGMENT PROCEDURE USERPROGRAM(INPUT,OUTPUT: FIBP);
BEGIN FWRITELN(SYSTERM^);
  PL := 'No user program';
  FWRITESTRING(SYSTERM^,PL,0)
END (*USERPROGRAM*) ;

{.fs} { cram all in one segment since we have unlimited code-space }
{.fs# SEGMENT } PROCEDURE DEBUGGER;
BEGIN FWRITELN(SYSTERM^);
  PL := 'No debugger in system';
  FWRITESTRING(SYSTERM^,PL,0)
END (*DEBUGGER*) ;

{.fs} { cram all in one segment since we have unlimited code-space }
{.fs# SEGMENT } PROCEDURE PRINTERROR(XEQERR,IORSLT: INTEGER);
  VAR S: STRING[40];
BEGIN S := 'Unknown run-time error';
  CASE XEQERR OF
    1:  S := 'Value range error';
    2:  S := 'No proc in seg-table';
    3:  S := 'Exit from uncalled proc';
    4:  S := 'Stack overflow';
    5:  S := 'Integer overflow';
    6:  S := 'Divide by zero';
    7:  S := 'NIL pointer reference';
    8:  S := 'Program interrupted by user';
    9:  S := 'System IO error';
   10:  BEGIN S := 'unknown cause';
	  CASE IORSLT OF
	    1:  S := 'parity (CRC)';
	    2:  S := 'illegal unit #';
	    3:  S := 'illegal IO request';
	    4:  S := 'data-com timeout';
	    5:  S := 'vol went off-line';
	    6:  S := 'file lost in dir';
	    7:  S := 'bad file name';
	    8:  S := 'no room on vol';
	    9:  S := 'vol not found';
	   10:  S := 'file not found';
	   11:  S := 'dup dir entry';
	   12:  S := 'file already open';
	   13:  S := 'file not open';
	   14:  S := 'bad input format';
	   15:  S := 'ring buffer overflow';
	   16:  S := 'disk write protected';
	   17:  S := 'illegal block #';
	   18:  S := 'bad byte count';
	   19:  S := 'bad init record'
	  END (*IO ERRORS*) ;
	INSERT('IO error: ',S,1)
      END;
   11:  S := 'Unimplemented instruction';
   12:  S := 'Floating point error';
   13:  S := 'String overflow';
   14:  S := 'Programmed HALT';
   15:  S := 'Programmed break-point'
  END (*XEQ ERRORS*) ;
  WRITELN(OUTPUT,S);
END (*PRINTERROR*) ;

{.fs} { cram all in one segment since we have unlimited code-space }
{.fs# SEGMENT } PROCEDURE INITIALIZE;
  VAR JUSTBOOTED: BOOLEAN; LTITLE: STRING[40];
      MONTHS: ARRAY [0..15] OF STRING[3];
      STARTUP : BOOLEAN;
      STKFILL: ARRAY [0..1199] OF INTEGER;
{.fs} RAMAV: REAL;  { available data RAM }

  PROCEDURE INITSYSCOM;
    VAR TITLE: STRING;
        F: FILE OF MISCINFOREC;
    
    PROCEDURE INIT_FILLER(VAR  FILLER : STRING);
      BEGIN
	WITH SYSCOM^.CRTCTRL DO
	  BEGIN
	    IF FILLCOUNT > FILL_LEN THEN
	      FILLCOUNT := FILL_LEN;
	    FILLER[0] := CHR(FILLCOUNT);
	    FILLCHAR(FILLER[1],FILLCOUNT,CHR(0));
	    END;
      END  {of INIT_FILLER};

    BEGIN               {of INITSYSCOM}
      INIT_FILLER(FILLER);
      DEBUGINFO := NIL;
      IPOT[0] := 1; IPOT[1] := 10; IPOT[2] := 100;
      IPOT[3] := 1000; IPOT[4] := 10000; DIGITS := ['0'..'9'];
      WITH SYSCOM^ DO
	BEGIN
	XEQERR := 0;    IORSLT := INOERROR;
	BUGSTATE :=0
	END;
      TITLE := '*SYSTEM.MISCINFO' ;
      RESET( F, TITLE );
      IF IORESULT = ORD(INOERROR) THEN
	BEGIN
	IF NOT EOF( F ) THEN
	  WITH SYSCOM^, F^ DO
	    BEGIN
	    MISCINFO := MSYSCOM.MISCINFO;
            CRTTYPE := MSYSCOM.CRTTYPE;
            CRTCTRL := MSYSCOM.CRTCTRL;
	    CRTINFO := MSYSCOM.CRTINFO;
	    INIT_FILLER(FILLER);
	    END;
	CLOSE( F, NORMAL )
{.fs#	END; }
{.fs}	END
{.fs} ELSE          { initialize MISCINFO meaningfully (Apple defaults) }
{.fs}   WITH SYSCOM^,SYSCOM^.MISCINFO,SYSCOM^.CRTCTRL,SYSCOM^.CRTINFO DO BEGIN
{.fs}     { MISCINFO }
{.fs}     NOBREAK:=FALSE;   { ?? EDITOR sets this while running }          
{.fs}     STUPID:=FALSE;    { student prorammer id }
{.fs}     SLOWTERM:=FALSE;  { it's 2013 }
{.fs}     HASXYCRT:=TRUE;
{.fs}     HASLCCRT:=TRUE;
{.fs}     HAS8510A:=FALSE;  { a specific graphics chip that we are not }
{.fs}     HASCLOCK:=TRUE;
{.fs}     USERKIND:=NORMAL;
{.fs}     WORD_MACH:=TRUE;  { Retro Pascal Interpreter }
{.fs}     IS_FLIPT:=FALSE;  { Retro Pascal Interpreter }
{.fs}     { CRTTYPE }
{.fs}     CRTTYPE:=0;       { from Apple SYSTEM.MISCINFO }
{.fs}     { CRTCTRL: output sequences for terminal control }
{.fs}     ESCAPE:=CHR(0);
{.fs}     HOME:=CHR(25);
{.fs}     ERASEEOS:=CHR(11);
{.fs}     ERASEEOL:=CHR(29);
{.fs}     NDFS:=CHR(28);    { non-destructive forward space (move cursor right) }
{.fs}     RLF:=CHR(31);     { reverse line feed (move cursor up) }
{.fs}     BACKSPACE:=CHR(8);
{.fs}     FILLCOUNT:=0;
{.fs}     CLEARSCREEN:=CHR(12);
{.fs}     CLEARLINE:=CHR(0);
{.fs}     FILLCHAR(SYSCOM^.CRTCTRL.PREFIXED,2,CHR(0));
{.fs}     { CRTINFO: input character codes for special keys, and other }
{.fs}     WIDTH:=80;        { some value to start with }
{.fs}     HEIGHT:=24;
{.fs}     UP:=CHR(15);      { Ctrl-O }
{.fs}     DOWN:=CHR(12);    { Ctrl-L }
{.fs}     LEFT:=CHR(8);
{.fs}     RIGHT:=CHR(21);   { cursor key right }
{.fs}     EOF:=CHR(3);      { these 6 from Apple SYSTEM.MISCINFO; what do they mean? }
{.fs}     FLUSH:=CHR(6);    { Ctrl-F }
{.fs}     BREAK:=CHR(0);
{.fs}     STOP:=CHR(19);    { Ctrl-S stop terminal }
{.fs}     CHARDEL:=CHR(8);
{.fs}     BADCH:='?';
{.fs}     LINEDEL:=CHR(24); { Ctrl-X delete current input line }
{.fs}     ALTMODE:=CHR(27); { Esc key e.g. in EDITOR }
{.fs}     PREFIX:=CHR(0);
{.fs}     ETX:=CHR(3);
{.fs}     ALPHA_LOCK:=CHR(0);
{.fs}     FILLCHAR(SYSCOM^.CRTINFO.PREFIXED,2,CHR(0));
{.fs}     INIT_FILLER(FILLER);
{.fs}   END;
      UNITCLEAR(1) (*GIVE BIOS NEW SOFT CHARACTERS FOR CONSOLE*)
    END (*INITSYSCOM*) ;

  PROCEDURE INITUNITABLE;
  VAR LUNIT: UNITNUM;
      LDIR: DIRP;
      LFIB : FIB;
      F : SYSFILE;
      TEMP_NAMES : FILE_TABLE;
      NOT_FOUND : SET OF SYSFILE;

    PROCEDURE INIT_ENTRY(LUNIT : UNITNUM; UNIT_NAME : VID);
    BEGIN
      UNITCLEAR(LUNIT);
      IF IORESULT = ORD(INOERROR) THEN
	UNITABLE[LUNIT].UVID := UNIT_NAME;
      END  {of INIT_ENTRY};

  BEGIN         {of INITUNITABLE}
    FILENAME[ASSMBLER] := ':SYSTEM.ASSMBLER';
    FILENAME[COMPILER] := ':SYSTEM.COMPILER';
    FILENAME[EDITOR] := ':SYSTEM.EDITOR';
    FILENAME[FILER] := ':SYSTEM.FILER';
    FILENAME[LINKER] := ':SYSTEM.LINKER';
{.fs} FILENAME[VIEWFILE] := ':SYSTEM.VIEWFILE';
    TEMP_NAMES := FILENAME;
    NOT_FOUND := [ASSMBLER .. LINKER];
    FINIT(LFIB,NIL,-1);
{.fs} IF JUSTBOOTED THEN    { prefix will be the second disk }
{.fs}   DKVID := '';
    FOR LUNIT := 0 TO MAXUNIT DO
      WITH UNITABLE[LUNIT] DO
	BEGIN
	  UVID := '';
	  UISBLKD := LUNIT IN [4,5,9..12];
	  IF UISBLKD THEN
	    BEGIN
	      UEOVBLK := MMAXINT;
	      UNITCLEAR(LUNIT);
	      IF IORESULT = ORD(INOERROR) THEN
		IF FETCHDIR(LUNIT) THEN
		  BEGIN
		    UVID := SYSCOM^.GDIRP^[0].DVID;
		    IF LUNIT = SYSCOM^.SYSUNIT THEN
		      BEGIN
			SYVID := UVID;
			LTITLE := '*SYSTEM.STARTUP';
			FOPEN(LFIB,LTITLE,TRUE,NIL);
		        STARTUP := LFIB.FISOPEN;
			FCLOSE(LFIB,CNORMAL);
{.fs#			END; }
		      END
{.fs}               ELSE IF DKVID='' THEN   { prefix := second disk we find }
{.fs}                 DKVID := UVID;
		    FOR F := ASSMBLER TO LINKER DO
		      IF (LUNIT = SYSCOM^.SYSUNIT) OR (F IN NOT_FOUND) THEN
			BEGIN
			  LTITLE := CONCAT(UVID,TEMP_NAMES[F]);
			  FOPEN(LFIB,LTITLE,TRUE,NIL);
			  IF LFIB.FISOPEN THEN
			    BEGIN
			      FILENAME[F] := LTITLE;
			      NOT_FOUND := NOT_FOUND - [F];
			      END;
			  FCLOSE(LFIB,CNORMAL);
		          END {of IF (LUNIT ...};
		    END {of IF FETCHDIR .. } ;
	      END  {of IF UISBLKD .. };
	  END {of WITH};
{.fs# IF JUSTBOOTED THEN }
{.fs} IF DKVID='' THEN
      DKVID := SYVID;
    LUNIT := VOLSEARCH(SYVID,FALSE,LDIR);
    IF LDIR = NIL THEN 
      HALT;
    THEDATE := LDIR^[0].DLASTBOOT;
    INIT_ENTRY(1,'CONSOLE');
    INIT_ENTRY(2,'SYSTERM');
    INIT_ENTRY(3,'GRAPHIC');
    INIT_ENTRY(6,'PRINTER');
{.fs# INIT_ENTRY(7,'REMIN');  }
{.fs# INIT_ENTRY(8,'REMOUT'); }
    INIT_ENTRY(7,'CLIP');
    INIT_ENTRY(8,'AUDIO');
    END {of INITUNITABLE};
  
  PROCEDURE INITCHARSET;
  TYPE CHARSET= ARRAY [32..127] OF
	          PACKED ARRAY [0..9] OF 0..255;
  VAR I: INTEGER;
      DOTRITON : BOOLEAN;
      TRIX: RECORD CASE BOOLEAN OF
	      TRUE:  (CHARADDR: INTEGER);
	      FALSE: (CHARBUFP: ^ CHAR)
	    END;
      DISPLAY: ARRAY [0..79,0..19] OF INTEGER; (*FOR TRITON*)
      CHARBUF: RECORD
	           SET1: CHARSET;
	           FILLER1: PACKED ARRAY [0..63] OF CHAR;
	           SET2: CHARSET;
	           FILLER2: PACKED ARRAY [0..63] OF CHAR;
	           TRITON: ARRAY [0..63,0..3] OF INTEGER
	         END (*CHARBUF*) ;
      LFIB: FIB;
  BEGIN FINIT(LFIB,NIL,-1);
    LTITLE := '*SYSTEM.CHARSET';
    FOPEN(LFIB,LTITLE,TRUE,NIL);
    IF LFIB.FISOPEN THEN
      BEGIN 
	UNITCLEAR(3);
	IF IORESULT = ORD(INOERROR) THEN
	  BEGIN
	    UNITWRITE(3,TRIX,128);
	    WITH LFIB.FHEADER DO
	      BEGIN 
		DOTRITON := DLASTBLK-DFIRSTBLK > 4;
	        UNITREAD(LFIB.FUNIT,CHARBUF,SIZEOF(CHARBUF),DFIRSTBLK)
	      END;
	    TRIX.CHARADDR := 512-8192;  (*UNIBUS TRICKYNESS!*)
	    FOR I := 32 TO 127 DO
	      BEGIN
	        MOVERIGHT(CHARBUF.SET1[I],TRIX.CHARBUFP^,10);
	        TRIX.CHARADDR := TRIX.CHARADDR+16
	      END;
	    TRIX.CHARADDR := 512-6144;
	    FOR I := 32 TO 127 DO
	      BEGIN
	        MOVERIGHT(CHARBUF.SET2[I],TRIX.CHARBUFP^,10);
	        TRIX.CHARADDR := TRIX.CHARADDR+16
	      END;
	    IF JUSTBOOTED AND DOTRITON AND NOT STARTUP THEN
	      BEGIN (*INITIALIZE DISPLAY ARRAY*)
		FILLCHAR(DISPLAY,SIZEOF(DISPLAY),0);
		FOR I := 0 TO 63 DO
		  MOVELEFT(CHARBUF.TRITON[I],DISPLAY[I,10],8);
		UNITWRITE(3,DISPLAY[-80],23)
		END  ELSE
		  UNITWRITE(3,DISPLAY,7);
	  END
      END
    ELSE
      SYSCOM^.MISCINFO.HAS8510A := FALSE;
    FCLOSE(LFIB,CNORMAL)
  END (*INITCHARSET*) ;

  PROCEDURE INITHEAP;
  VAR LWINDOW: WINDOWP;
  BEGIN (*BASIC FILE AND HEAP SETTUP*)
    SYSCOM^.GDIRP := NIL; (* MUST PRECEDE THE FIRST "NEW" EXECUTED *)
    NEW(SWAPFIB,TRUE,FALSE); FINIT(SWAPFIB^,NIL,-1);
    NEW(INPUTFIB,TRUE,FALSE);  NEW(LWINDOW);
    FINIT(INPUTFIB^,LWINDOW,0);
    NEW(OUTPUTFIB,TRUE,FALSE);  NEW(LWINDOW);
    FINIT(OUTPUTFIB^,LWINDOW,0);
    NEW(SYSTERM,TRUE,FALSE);  NEW(LWINDOW);
    FINIT(SYSTERM^,LWINDOW,0);
    GFILES[0] := INPUTFIB; GFILES[1] := OUTPUTFIB;
    WITH USERINFO DO
      BEGIN
	NEW(SYMFIBP,TRUE,FALSE); FINIT(SYMFIBP^,NIL,-1);
	NEW(CODEFIBP,TRUE,FALSE); FINIT(CODEFIBP^,NIL,-1)
      END;
    MARK(EMPTYHEAP)
  END (*INITHEAP*) ;

  PROCEDURE INITWORKFILE;
    
    PROCEDURE TRY_OPEN(VAR WORK_FIB : FIB; FIRST : FULL_ID; VAR SEC_VOL : VID;
                       VAR SEC_NAME : TID; VAR FLAG : BOOLEAN);
    VAR  LTITLE : FULL_ID;
    BEGIN
      FOPEN(WORK_FIB,FIRST,TRUE,NIL);
      IF NOT WORK_FIB.FISOPEN THEN
	IF SEC_NAME <> '' THEN
	  BEGIN
	    LTITLE := CONCAT(SEC_VOL,':',SEC_NAME);
	    FOPEN(WORK_FIB,LTITLE,TRUE,NIL);
	    END;
      FLAG := WORK_FIB.FISOPEN;
      IF FLAG THEN
	BEGIN 
	  SEC_VOL := WORK_FIB.FVID;
	  SEC_NAME := WORK_FIB.FHEADER.DTID
	  END;
      FCLOSE(WORK_FIB,CNORMAL);
      END;  {of TRY_OPEN}

  BEGIN
    WITH USERINFO DO
      BEGIN (*INITIALIZE WORK FILES ETC*)
	ERRNUM := 0; ERRBLK := 0; ERRSYM := 0;
	IF JUSTBOOTED THEN
	  BEGIN
	    SYMTID := ''; CODETID := ''; WORKTID := '';
	    SYMVID := SYVID; CODEVID := SYVID; WORKVID := SYVID
	  END;
	TRY_OPEN(SYMFIBP^,'*SYSTEM.WRK.TEXT',SYMVID,SYMTID,GOTSYM);
	TRY_OPEN(CODEFIBP^,'*SYSTEM.WRK.CODE',CODEVID,CODETID,GOTCODE);
	ALTMODE := SYSCOM^.CRTINFO.ALTMODE;
	SLOWTERM := SYSCOM^.MISCINFO.SLOWTERM;
	STUPID := SYSCOM^.MISCINFO.STUPID;
      END
  END (*INITWORKFILE*) ;
  
PROCEDURE INITFILES;
  BEGIN
    FCLOSE(SWAPFIB^,CNORMAL);
    FCLOSE(USERINFO.SYMFIBP^,CNORMAL);
    FCLOSE(USERINFO.CODEFIBP^,CNORMAL);
    FCLOSE(INPUTFIB^,CNORMAL);
    FCLOSE(OUTPUTFIB^,CNORMAL);
    LTITLE := 'CONSOLE:';
    FOPEN(INPUTFIB^,LTITLE,TRUE,NIL);
    FOPEN(OUTPUTFIB^,LTITLE,TRUE,NIL);
    IF JUSTBOOTED THEN
      BEGIN LTITLE := 'SYSTERM:';
	FOPEN(SYSTERM^,LTITLE,TRUE,NIL)
      END;
    GFILES[0] := INPUTFIB;
    GFILES[1] := OUTPUTFIB;
    GFILES[2] := SYSTERM;
    GFILES[3] := NIL; GFILES[4] := NIL; GFILES[5] := NIL;
  END (*INITFILES*) ;

BEGIN (*INITIALIZE*)
  JUSTBOOTED := EMPTYHEAP = NIL;
  MONTHS[ 0] := '???'; MONTHS[ 1] := 'Jan';
  MONTHS[ 2] := 'Feb'; MONTHS[ 3] := 'Mar';
  MONTHS[ 4] := 'Apr'; MONTHS[ 5] := 'May';
  MONTHS[ 6] := 'Jun'; MONTHS[ 7] := 'Jul';
  MONTHS[ 8] := 'Aug'; MONTHS[ 9] := 'Sep';
  MONTHS[10] := 'Oct'; MONTHS[11] := 'Nov';
  MONTHS[12] := 'Dec'; MONTHS[13] := '???';
  MONTHS[14] := '???'; MONTHS[15] := '???';
  IF JUSTBOOTED THEN INITHEAP
  ELSE RELEASE(EMPTYHEAP);
  INITUNITABLE; {and the date, filenames, *SYSTEM.STARTUP} 
  INITFILES;
  INITSYSCOM; (*AND SOME GLOBALS*)
  INITWORKFILE;
  CLEARSCREEN;
  IF SYSCOM^.MISCINFO.HAS8510A THEN
    INITCHARSET;
  WRITELN(OUTPUT);
  IF JUSTBOOTED THEN
    IF NOT STARTUP THEN
      WITH SYSCOM^ DO
	BEGIN
	  IF MISCINFO.HASXYCRT THEN
	    BEGIN
	      FGOTOXY(0,CRTINFO.HEIGHT DIV 3);
	      IF FILL_LEN > 0 THEN
		WRITE(OUTPUT,FILLER);
	      END;
{.fs#	  WRITELN(OUTPUT,'Welcome  ',SYVID,',  to'); }
{.fs}	  WRITELN(OUTPUT,'Welcome to 1979!');
	  WRITELN(OUTPUT);
	  WRITELN(OUTPUT,'U.C.S.D.  Pascal  System  II.0');
	  WRITELN(OUTPUT);
{.fs#	  WITH THEDATE DO                                                       }
{.fs#	    WRITE(OUTPUT,'Current date is  ',DAY,'-',MONTHS[MONTH],'-',YEAR);   }
{.fs#	  WRITELN(OUTPUT);                                                      }
{.fs}     WRITE(OUTPUT,'Pascal System Size is');
{.fs}     UNITREAD(0,RAMAV,4,0,25504{SYSIMPLRAMAVAIL}); { cf. RETROSTUFF }
{.fs}     FWRITEREAL(OUTPUTFIB^,RAMAV/1024,1,1);
{.fs}	  WRITELN(OUTPUT,' KB');
{.fs}	  WRITELN(OUTPUT);
{.fs}	  WRITELN('Type H for help');
{.fs}	  FGOTOXY(0,CRTINFO.HEIGHT - 2);
{.fs}	  WRITELN('Copyright 1978, 1979 Regents of the University of California');
{.fs}	  WRITE('Copyright 2013 Frank Seide');
	END  ELSE  {nothing}
  ELSE
    WRITELN(OUTPUT,'System re-initialized')
END (*INITIALIZE*) ;
