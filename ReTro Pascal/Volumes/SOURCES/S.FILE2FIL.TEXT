
{----------------- COMMAND PARSERS & DIRECTORY SEARCH ROUTINES ----------------}

  { Ascertains the exact state of GTITLE. If that state does not correspond }
  { with the acceptable states for that string then an appropriate error    }
  { messages will be returned to the user and return to the FILER prompt    }
  { line. Otherwise, will set LASTSTATE to the condition found              }
  PROCEDURE SCANINPUT(GTITLE : STRNG; CHECK : CHCKS;
			 ERROR : INTEGER; WHERE : LOCATION; GETDIR : BOOLEAN);
  VAR
    NEWDIR : ^INTEGER;
    GSEGS : INTEGER;

    PROCEDURE MAKECALL(ERR : INTEGER; STATE : CHECKS);
    VAR
      PRINTERROR : BOOLEAN;

    BEGIN
      LASTSTATE := STATE;
      IF (STATE IN CHECK) OR (ERROR = 0) THEN
	EXIT(SCANINPUT);
      IF GTITLE = '' THEN
	EXIT(CALLPROC);
      HOMECURSOR;
      WRITEANDCLEAR;

      { Writes out the explicit volume name }
      IF GTITLE [1] = '*' THEN
	BEGIN
	  DELETE(GTITLE,1,1);
	  IF GTITLE [1] = ':' THEN
	    DELETE(GTITLE,1,1);
	  WRITE(SYVID,':')
	END
      ELSE
	IF GTITLE [1] = ':' THEN
	  WRITE(DKVID);

      WRITE(GTITLE);
      IF SYSCOM^.CRTINFO.WIDTH >= 80 THEN
	WRITE(' - ')
      ELSE
	WRITEANDCLEAR; { Write string in error }
      MESSAGES(ERR,FALSE);              { Write the state of the string }

      { Was the user even close to the correct format }
      CASE STATE OF
	BADTITLE : PRINTERROR := TRUE;
	NOVOL,BADUNIT,BADDIR : PRINTERROR := (ERROR=FILEEXP) AND (GTID='');
	UNBLKDVOL : PRINTERROR := ERROR IN [BLKDEXP,FILEEXP,FILEBLKDEXP];
	OKFILE,BADFILE : PRINTERROR := ERROR IN [BLKDEXP,UNBLKDEXP,VOLEXP];
	OKDIR : PRINTERROR := ERROR IN [UNBLKDEXP,FILEEXP,FILEUNBLKDEXP]
      END;
      IF NOT SYSCOM^.MISCINFO.SLOWTERM THEN
	BEGIN
	  IF PRINTERROR THEN
	    BEGIN
	      IF SYSCOM^.CRTINFO.WIDTH < 80 THEN
		WRITEANDCLEAR
	      ELSE
		WRITE(', ');
	      MESSAGES(ERROR,FALSE)
	    END;

	  { User may need to know which part of the string is in error }
	  IF WHERE = SOURCE THEN
	    WRITE(' <source>');
	  IF WHERE = DESTINATION THEN
	    WRITE(' <dest>');
	END;
      EXIT(CALLPROC)
    END;

  BEGIN { SCANINPUT }
    GUNIT := 0;
    IF SCANTITLE(GTITLE,GVID,GTID,GSEGS,GKIND) THEN { Break up input string }
      BEGIN
	IF GETDIR THEN
	  MARK(NEWDIR);    { Will cause the present directory to dissappear }
	GVID2 := GVID;     { Save present GVID }
	GUNIT := VOLSEARCH(GVID,TRUE,GDIR);  { Searchs for proper volume }
	IF GDIR = NIL THEN   { Wasn't able to read a directory off the volume }
	  BEGIN
	    IF GUNIT = 0 THEN
	      MAKECALL(9,NOVOL);   { No such vol was on-line }
	    UNITCLEAR(GUNIT);
	    IF IORESULT <> 0 THEN
	      MAKECALL(2,BADUNIT); { Bad unit # given }
	    IF UNITABLE [GUNIT].UISBLKD THEN
	      MAKECALL(NODIR,BADDIR);  { Vol was blkd, but no dir was on it }
	    MAKECALL(UNBLKD,UNBLKDVOL) { Volume was not blocked }
	  END;
	IF GTID = '' THEN
	  MAKECALL(BLKD,OKDIR);  { Vol was blkd & the dir is ok }
	IF DIRSEARCH(GTID,TRUE,GDIR) <> 0 THEN
	  MAKECALL(FOUNDFILE,OKFILE);   { The file was found }
	MAKECALL(10,BADFILE) { The file was not found }
      END;
    MAKECALL(ILLFILEVOL,BADTITLE) { Illegal name (too long, or missing bracket }
  END { SCANINPUT };

  { Directory search routine for finding the user requested files }
  { On the first call to this routine all tables and neccessary   }
  { bits in the directory will be updated to keep track of the    }
  { nescessary files, without losing any. All files that are to   }
  { be used in wildcard operations must be present on the initial }
  { initial call to this routine                                  }
  FUNCTION SEARCHDIR(MESSAGE : STRNG; VAR GINX : INTEGER;
			DEST, SCREENCLEAR, SWAPPING : BOOLEAN) : BOOLEAN;
  VAR
    X : INTEGER;
    NEWSTRING : TID;

      { At this point a requested file has been found. In case that    }
      { question is true we must see if the user still wants to use it }
      PROCEDURE FOUNDFILE;
      BEGIN
	WITH GDIR^ [GINX] DO
	  BEGIN
	    SOURCETITLE := DTID;
	    FROMWHERE := CONCAT(VOLNAME1,':',DTID);
	    CH := 'Y';
	    FOUND := FILEFOUND;     { Yes a usable file has been found }
	    IF (MESSAGE <> '') AND QUESTION THEN { Confirm operation }
	      BEGIN
		CLEARLINE;
		IF NOT SYSCOM^.MISCINFO.SLOWTERM THEN
		  WRITE(MESSAGE,' ');
		WRITE(DTID,' ? ');
		CH := GETCHAR(FALSE);
		IF NOT EOLN THEN
		  WRITELN;
		IF CH = SYSCOM^.CRTINFO.ALTMODE THEN { User wants to abort }

		  { Don't return to prompt line because of the R(emove command }
		  BEGIN
		    FOUND := ABORTIT;
		    EXIT(SEARCHDIR)
		  END
	      END
	  END;
	SEARCHDIR := CH = 'Y'
      END;

  { Checks to see if the requested portion of the two strings match }
  FUNCTION TESTSTR(STR : TID; START : INTEGER) : BOOLEAN;
  VAR
    TEMP : TID;
  BEGIN
    TEMP [0] := STR [0];
    MOVELEFT(GDIR^ [X].DTID[START],TEMP[1],LENGTH(STR)); 
    TESTSTR := TEMP = STR
  END;

  BEGIN { SEARCHDIR }
    SEARCHDIR := FALSE;
    IF GINX = 0 THEN
      BEGIN
	DEST := DEST AND UNITABLE [DESTUNIT].UISBLKD;
	IF SCREENCLEAR AND WILDCARD THEN
	  BEGIN
	    CLEARSCREEN;
	    WRITELN
	  END
	ELSE
	  CLEARLINE;
	FOUND := NOFILES;

	{ Will it be nescessary to use the STATUS bits in the directory }
	{ to keep proper track of the files                             }
	MARKING := DEST AND (SOURCEVID = DESTVID);

	{ Search directory for eligible source files }
	FOR X := 1 TO GDIR^ [0].DNUMFILES DO
	WITH GDIR^ [X] DO
	  BEGIN
	    STATUS := FALSE;
	    IF (LENGTH(STRING1) + LENGTH(STRING2)) <= LENGTH(DTID) THEN
	      IF TESTSTR(STRING1,1) AND 
		TESTSTR(STRING2,LENGTH(DTID) - LENGTH(STRING2) + 1) THEN
		  WITH DIRMAP DO
		  BEGIN  { This file matches the nescessary strings }
		    IF (STRING1=DTID) OR WILDCARD THEN
		      BEGIN
			STATUS := MARKING;
			DIRENTRY [X] := TRUE;
			ENTRIES := ENTRIES + 1;
		      END;
		    FOUND := FILESNOGOOD
		  END;
	  END;
	IF MARKING THEN
	  UPDATEDIR     { Must maintain the STATUS bits in the directory }
      END
    ELSE
      IF DEST THEN
	GINX := GINX - 1;
    IF DIRMAP.ENTRIES > 0 THEN
    BEGIN
      IF SWAPPING THEN
	INSERTVOLUME(SOURCEUNIT,SOURCEVID,TRUE); { Get source volume on-line }
      CH := 'N';
      WHILE (GINX < GDIR^[0].DNUMFILES) AND (CH <> 'Y') DO
	WITH GDIR^ [GINX+1] DO
	  BEGIN
	    GINX := GINX + 1; { Look at the next directory entry }
	    IF MARKING THEN
	      BEGIN
		DIRMAP.DIRENTRY [GINX] := STATUS;
		IF STATUS THEN
		  BEGIN
		    STATUS := FALSE;   { Turn off status bit in directory }
		    UPDATEDIR
		  END
	      END;
	    IF DIRMAP.DIRENTRY [GINX] THEN
	      BEGIN    { Source file for this entry is o.k. what about dest }
		IF DEST THEN
		  BEGIN
		    NEWSTRING := COPY(DTID,LENGTH(STRING1) + 1,
			    LENGTH(DTID) - LENGTH(STRING1) - LENGTH(STRING2));
		    X := LENGTH(NEWSTRING) + 
		      SCAN(LENGTH(STRING3),= '[',STRING3[1]) + LENGTH(STRING4);
		    IF (X <= TIDLENG) AND ((X > 0) OR NOT WILDCARD) THEN

		      { Destination file will be o.k. (its small enough ) }
		      BEGIN
			TOWHERE := CONCAT(VOLNAME2,':',STRING3,
						   NEWSTRING,STRING4);
			IF (STRING1 = DTID) OR WILDCARD THEN
			  FOUNDFILE
		      END
		    ELSE
		      PRINTMESS(SOURCEVID,DTID,'not proccessed');
		  END
		ELSE
		  FOUNDFILE;  { No destination file is needed }
		DIRMAP.DIRENTRY [GINX] := FALSE; { Turn off bit for this entry }
		DIRMAP.ENTRIES := DIRMAP.ENTRIES - 1; { One less entry to do }
	      END;
	  END;
    END;
    IF FOUND = NOFILES THEN
      MESSAGES(ORD(INOFILE),FALSE);  { No requested files were found }
    IF FOUND = FILESNOGOOD THEN
      MESSAGES(BADDEST,FALSE); { The req. files found could not be used }
  END { SEARCHDIR };

  { Input string parser. Removes wildcard symbols. Sets WILDCARD and QUESTION }
  { Expands dollar signs. Sets SOURCEVID, DESTVID, SOURCEUNIT, DESTUNIT,      }
  { VOLNAME1, VOLNAME2, STRING1, STRING2, STRING3, STRING4                    }
  PROCEDURE CHECKFILE(MSG1,MSG2 : SHORTSTRING; DEFAULT,ERROR1 : INTEGER; 
		     WILD,FILLE : BOOLEAN; CHECK1 : CHCKS);
  VAR
    SRCSTR : STRING;

    { Will scan up to the next ',' or to the end of the line. Does all '$' }
    { expansions. Parses string for wildcards, volname & filename. Makes   }
    { sure that the source and dest files are of the appropriate class and }
    { that needed volumes stay on line                                     }
    PROCEDURE PROCESSDATA(MSG:SHORTSTRING; FIRSTCALL:BOOLEAN; VAR VOLNAME:VID;
		       VAR FIRSTSTR,SECONDSTR:SHORTSTRING; VAR WHERETO:STRNG);
    VAR
      STR,OLD : STRING;
      WHERE : LOCATION;
      X,I,LOC : INTEGER;

      { Makes sure that the structure before the last delimmiter is of the }
      { appropriate size & contains no special symbols. If for any reason  }
      { the string is not correct an error will be flagged and this        }
      { procedure will return to the FILER prompt line                     }
      PROCEDURE FINDDELIM(SIZE,MESSAGE : INTEGER; VAR STRIING : STRNG);
      VAR
	ERROR : BOOLEAN;

	{ Scans STRIING for the appropriate special symbol ['$','?','='] }
	FUNCTION SCAN2(CH : CHAR) : BOOLEAN;
	BEGIN
	  SCAN2 := SCAN(LOC,= CH,STR[1]) >= LOC;
	END;

      BEGIN { FINDDELIM }
	ERROR := LOC > SIZE;          { Too long to be a legal entry }
	IF (NOT ERROR) AND SCAN2('$') AND SCAN2('=') AND SCAN2('?') THEN
	  BEGIN
	    STRIING := COPY(STR,1,LOC);   { Returns correct part of the string }
	    DELETE(STR,1,LOC);
	    DELETE(STR,1,1);
	    EXIT(FINDDELIM);              { No errors encountered }
	  END;
	CLEARLINE;
	IF NOT SYSCOM^.MISCINFO.SLOWTERM THEN
	  WRITE(COPY(STR,1,LOC));
	IF SYSCOM^.CRTINFO.WIDTH < 80 THEN   { Line will not fit in 40 chars. }
	  WRITEANDCLEAR;
	IF ERROR THEN
	  WRITE('...too long <');
	CASE MESSAGE OF
	  1 : WRITE(' file name ');
	  2 : WRITE(' scan string ');
	  3 : WRITE(' vol name ');
	END;
	IF ERROR THEN
	  BEGIN
	    IF MESSAGE = 3 THEN
	      WRITE(VIDLENG)
	    ELSE
	      WRITE(TIDLENG);
	    WRITE(' - char. max >');
	  END
	ELSE
	  WRITE('- Illegal format');
	EXIT(CALLPROC)
      END { FINDDELIM };

      { Scan STR for special symbols ['$','=','?',','] }
      FUNCTION SCAN1(CH : CHAR) : INTEGER;
      BEGIN
	SCAN1 := SCAN(LENGTH(STR), = CH,STR[1]);
      END;

    BEGIN
      { Need to get input string from user }
      IF INSTRING = '' THEN
	BEGIN
	  CLEARLINE;
	  WRITE(MSG);
	  IF FIRSTCALL AND FAST THEN
	    IF FILLE THEN
	      WRITE(' what file')
	    ELSE
	      WRITE(' what vol');
	  WRITE(' ? ');
{.fs}     { enable filename completion; this is a little complex }
{.fs}     IF NOT FILLE THEN INSTRING:='.:'             { volume (FILLE = 'file'!) }
{.fs}     ELSE IF FIRSTCALL THEN                    { we accept source or src,tgt }
{.fs}       IF WILD THEN INSTRING:='.?'                         { ? for wildcards }
{.fs}       ELSE INSTRING:='.'                             { no wildcards allowed }
{.fs}     ELSE                                                { asking for target }
{.fs}       IF WILDCARD THEN INSTRING:='.!'        { ! for 2nd arg wildcard subst }
{.fs}       ELSE INSTRING:='.$';            { $ for 'same name' (but no wildcard) }
{.fs}     INSTRING[1]:=CHR(3);  { enable filename completion }
	  READLN(INSTRING);
	  EATSPACES(INSTRING)
	END;

      { Copy input string into STR up to the first comma or end of line }
      LOC := SCAN(LENGTH(INSTRING), = ',',INSTRING[1]);
      IF LOC > 35 THEN
	EXIT(CALLPROC);
      STR := COPY(INSTRING,1,LOC);
      DELETE(INSTRING,1,LOC);
      DELETE(INSTRING,1,1);

      { Parse volume name out of STR. Check to see if QUESTION is true }
      QUESTION := QUESTION OR (SCAN1('?') < LENGTH(STR));
      LOC := SCAN1(':');
      IF (STR [1] = '#') OR (LOC < LENGTH(STR)) THEN
	FINDDELIM(VIDLENG,3,VOLNAME)
      ELSE
	IF STR[1] = '*' THEN
	  BEGIN
	    DELETE(STR,1,1);
	    VOLNAME := '*'
	  END;
      WHERETO := CONCAT(VOLNAME,':');

{.fs} { Deal with V1:F -> V2: format (append $ if V2 is blocked) }
{.fs} { BUGBUG: This does not handle multiple copies on one line, such as s1,d1,s2,d2 }
{.fs} IF (NOT FIRSTCALL) AND (DEFAULT = 0) AND (LENGTH(STR) = 0) THEN BEGIN
{.fs}	SCANINPUT(CONCAT(VOLNAME2,':'),[],0,NEITHER,FALSE);
{.fs}	IF LASTSTATE <> UNBLKDVOL THEN
{.fs}	  STR:='$';                         { implant the $ }
{.fs} END;

      { Expand the '$' if one exists    }
      I := SCAN1('$');
      IF I < LENGTH(STR) THEN
	BEGIN
	  IF LENGTH(STR)+LENGTH(SRCSTR)-1 > 35 THEN
	    EXIT(CALLPROC);    { Illegal expansion, too long }
	  OLD := STR;
	  STR[0] := CHR(LENGTH(SRCSTR)+LENGTH(STR)-1);
	  MOVELEFT(SRCSTR[1],STR[I+1],LENGTH(SRCSTR));
	  MOVELEFT(OLD[I+2],STR[I+1+LENGTH(SRCSTR)],LENGTH(OLD)-I-1);
	END;

      { Scan for wildcards }
      SRCSTR := STR;
      LOC := SCAN1('=');
      IF LOC = LENGTH(STR) THEN
	LOC := SCAN1('?');
      IF LOC < LENGTH(STR) THEN

	{ Wilcard sysmbol is present. Parse remaining string accordingly }
	IF WILD THEN
	  BEGIN
	    IF NOT (FIRSTCALL OR WILDCARD) THEN
	      MESSAGES(BADFORM,TRUE);
	    WILDCARD := TRUE;
	    FINDDELIM(TIDLENG,2,FIRSTSTR);
	    LOC := LENGTH(STR);
	    FINDDELIM(TIDLENG,2,SECONDSTR)
	  END
	ELSE
	  MESSAGES(NOWILD,TRUE)   { Wilcard operation is not allowed }
      ELSE

	{ No wilcards. Remaining string is a standard filename }
	BEGIN
	  IF (NOT FIRSTCALL) AND WILDCARD AND (DEFAULT = 0) THEN

	    { User used a wildcard symbol for the source file but not the }
	    { destination file. Only cases that this is allowed is when   }
	    { the user is listing the directory (i.e., DEFAULT <> 0) or   }
	    { when the destination file is an unblkd-volume               }
	    BEGIN
	      SCANINPUT(CONCAT(VOLNAME2,':'),[],0,NEITHER,FALSE);
	      IF LASTSTATE <> UNBLKDVOL THEN
		MESSAGES(BADFORM,TRUE);
	    END;
	  FINDDELIM(SHSTRLENG,1,FIRSTSTR);
	  WHERETO := CONCAT(WHERETO,FIRSTSTR)
	END;
      IF NOT FIRSTCALL THEN

	{ Set DESTUNIT & DESTVID to there proper values }
	BEGIN
	  SCANINPUT(WHERETO,[],0,WHERE,TRUE);
	  DESTUNIT := GUNIT;
	  DESTVID := GVID;

	  { Make sure that the user hasn't removed the source disk }
	  INSERTVOLUME(SOURCEUNIT,SOURCEVID,TRUE);
	END
      ELSE
	IF (INSTRING <> '') AND (DEFAULT <= 0) THEN
	  WHERE := DESTINATION
	ELSE
	  WHERE := NEITHER;

      { Restore the directory etc. for the source volume }
      IF WILDCARD THEN
	SCANINPUT(FROMWHERE,[OKDIR],BLKDEXP,SOURCE,TRUE)
      ELSE
	SCANINPUT(FROMWHERE,CHECK1,ERROR1,SOURCE,TRUE);
    END;

  BEGIN { CHECKFILE }
    INITGLOBALS;
    SRCSTR := '';
    PROCESSDATA(MSG1,TRUE,VOLNAME1,STRING1,STRING2,FROMWHERE);
    SOURCEUNIT := GUNIT;
    SOURCEVID := GVID;
    IF DEFAULT > 0 THEN
      EXIT(CHECKFILE);
    IF (INSTRING = '') AND (DEFAULT < 0) THEN
      EXIT(CHECKFILE);
    PROCESSDATA(MSG2,FALSE,VOLNAME2,STRING3,STRING4,TOWHERE);
  END;

{.fs} { --- original source filename: FILER.C.TEXT --- }

{     Copyright (C) 1979 Regents of the University of California.     }
{     Permission to copy or distribute this software or documen-      }
{     tation in hard or soft copy granted only by written license     }
{     obtained from the Institute for Information Systems.            }

{------------ PROCEDURES FOR MOVING, MAKING AND CHANGING FILES ----------------}

  { Checks to see if file is endangered by the operation to be performed }
  FUNCTION FINDSAME(DOO : BOOLEAN):BOOLEAN;
  BEGIN
    FINDSAME := TRUE;
    IF (LASTSTATE = OKFILE) AND (DOO OR (SOURCETITLE <> GTID) OR
					    (SOURCEVID <> GVID)) THEN
      FINDSAME := PURGEIT(CONCAT(GVID,':',GTID),'Remove old')
  END;

  { Allows the user to change the name of any file in the directory }
  { or the name of any blocked device                               }
  PROCEDURE CHANGER;
  VAR
    GFIB : UNTYPED;
    GFIBP : FIBP;
    IORSLT,LOC : INTEGER;

  BEGIN { CHANGER }
    REPEAT
      CHECKFILE('Change','Change to what',0,FILEBLKDEXP,TRUE,TRUE,
						      [OKFILE,OKDIR]);
      IF ((STRING1 <> '') AND (STRING3 <> '')) OR WILDCARD THEN

	{ Changing a filename }
	BEGIN
	  VOLNAME2 := VOLNAME1;   { Dest volname must be the same as source }
	  TOWHERE := CONCAT(VOLNAME1,':');
	  IF NOT WILDCARD THEN
	    TOWHERE := CONCAT(TOWHERE,STRING3);  { Dest filename is in STRING3 }
	  LOC := 0;
	  WHILE SEARCHDIR('Change',LOC,TRUE,TRUE,FALSE) DO
	    BEGIN
	      RESET(GFIB,FROMWHERE);   { Opens file to be changed }
	      CHECKRSLT(IORESULT);
	      GFIBP := GETPTR(GFIB);   { Gets the pointer to the files header }
	      SCANINPUT(TOWHERE,[BADFILE,OKFILE],FILEEXP,DESTINATION,TRUE);
	      IF FINDSAME(FALSE) THEN
		WITH GFIBP^ DO
		  BEGIN
		    FHEADER.DACCESS.YEAR := 100; { Let the OP-SYSTEM know }
		    PRINTMESS(FVID,FHEADER.DTID,GTID);
		    FHEADER.DTID := GTID;        { Change the filename }
		  END;
	      CLOSE(GFIB);
	      CHECKRSLT(IORESULT)
	    END
	END
      ELSE
	IF LENGTH(STRING1) + LENGTH(STRING3) = 0 THEN

	  { Changing a volume name }
	  BEGIN
	    SCANINPUT(TOWHERE,[NOVOL,OKDIR],BLKDEXP,DESTINATION,TRUE);
	    IF LASTSTATE = OKDIR THEN
	      MESSAGES(VOLONLINE,TRUE); { Don't allow two vols with same name }

	    { Allocate room for the directory & read it in }
	    NEW(GDIR);
	    UNITREAD(SOURCEUNIT,GDIR^,SIZEOF(DIRECTORY),DIRBLK);
	    CHECKRSLT(IORESULT);
	    GDIR^[0].DVID := GVID;  { Change the volume name }
	    UNITWRITE(SOURCEUNIT,GDIR^,SIZEOF(DIRECTORY),DIRBLK);
	    IORSLT := IORESULT;
	    RELEASE(GDIR);
	    CHECKRSLT(IORSLT);
	    UNITABLE[SOURCEUNIT].UVID := GVID;   { Update the unitable }
	    IF (SYVID = SOURCEVID) AND (SYSCOM^.SYSUNIT = SOURCEUNIT) THEN
	      SYVID := GVID;   { Name of root device has been changed }
	    IF DKVID = SOURCEVID THEN
	      DKVID := GVID;              { Prefixed volume's name was changed }
	    PRINTMESS(SOURCEVID,'',GVID)  { Tell user you did the change       }
	  END
	ELSE
	  MESSAGES(ILLCHANGE,TRUE)      { Can't change a volname to a filename }
    UNTIL INSTRING = ''
  END {CHANGER} ;

  { Allows the user to remove any selected file from the directory }
  PROCEDURE REMOVER;
  VAR
    DELETIONS : BITMAP;
    LINE,LOC : INTEGER;

  BEGIN { REMOVER }
    REPEAT
      CHECKFILE('Remove','',1,FILEEXP,TRUE,TRUE,[OKFILE]);
      LINE := 0;    { Keeps track of what line of output your at }
      LOC := 0;
      FILLCHAR(DELETIONS,SIZEOF(DELETIONS),CHR(0)); { Init's bitmap }
      WHILE SEARCHDIR('Remove',LOC,FALSE,TRUE,FALSE) DO { Get filename }
	BEGIN
	  IF NOT QUESTION THEN
	    BEGIN
	      PRINTMESS(GVID,GDIR^[LOC].DTID,'removed');
	      IF SYSCOM^.CRTINFO.HEIGHT = LINE THEN  { Don't scroll output }
		BEGIN
		  NSPACEWAIT(FALSE);
		  CLEARSCREEN;
		  LINE := 0
		END;
	      LINE := LINE+1;
	    END;
	  DELETIONS.ENTRIES := DELETIONS.ENTRIES + 1; { File to be removed   }
	  DELETIONS.DIRENTRY [LOC] := TRUE  { Total # of files to be removed }
	END;
      IF (FOUND IN [FILEFOUND,ABORTIT]) AND (DELETIONS.ENTRIES > 0) THEN
	BEGIN
	  CLEARLINE;
	  WRITE('Update directory ? '); { Make user confirm the removal ! }
	  IF NGETCHAR(TRUE) THEN
	    ZAPENTRIES(DELETIONS,TRUE); { Will remove the selected files  }
	END;
    UNTIL INSTRING = ''
  END {REMOVER} ;

  { Allows the user to transfer any file in the directory to another disk or }
  { to another file. Will also perform complete or partial binary transfers  }
  { of one disk to another                                                   }
  PROCEDURE TRANSFER;
  VAR
    LASTBLK,LOC : INTEGER;

    { Performs the actual transfer of the file from one location to another }
    PROCEDURE MOVEFILE;
    VAR
      RELBLK,NUMBLKS,NBLOCKS : INTEGER;
      FIRSTCALL,SINGLEDRIVE : BOOLEAN;
      GFIBP : FIBP;
      GFIB : UNTYPED;

    BEGIN
      RESET(GFIB,FROMWHERE); { Open source file }
      CHECKRSLT(IORESULT);
      GFIBP := GETPTR(GFIB); { Gets a pointer to the header of the source file }
      RELBLK := 0;           { Block relative to the source file }
      FIRSTCALL := TRUE;
      REPEAT
	NUMBLKS := LASTBLK - RELBLK;   { Blocks left to transfer }
	IF NUMBLKS > GBUFBLKS THEN  { GBUFBLKS = # of blks in transfer buffer }
	  NUMBLKS := GBUFBLKS; { Unable to fit whole file in transfer buffer  }
	NBLOCKS := BLOCKREAD(GFIB,GBUF^,NUMBLKS,RELBLK);
	CHECKRSLT(IORESULT);   { NBLOCKS = # of blocks actually read }
	IF FIRSTCALL THEN
	  BEGIN
	    FIRSTCALL := FALSE;
	    SCANINPUT(TOWHERE,[NOVOL,BADDIR,BADFILE,UNBLKDVOL,OKDIR,OKFILE],
					   FILEVOLEXP,DESTINATION,TRUE);
	    IF ((GVID2 <> '') AND (GVID2 [1] = '#') AND (GUNIT = SOURCEUNIT) 
		      AND UNITABLE [GUNIT].UISBLKD) OR (GUNIT = 0) THEN

	      { Destination disk is not on-line at the moment }
	      BEGIN
		CLEARSCREEN;
		IF GUNIT = 0 THEN
		  WRITELN('Put in ',GVID,':')
		ELSE
		  WRITELN('Insert destination disk');
		NSPACEWAIT(TRUE);

		{ Make sure that the user put the volume on-line }
		SCANINPUT(TOWHERE,[BADFILE,OKFILE,BADDIR,OKDIR,UNBLKDVOL],
				      FILEVOLEXP,DESTINATION,TRUE);
	      END;
	    IF GUNIT IN [1,2] THEN
	      CLEARSCREEN;     { Destination is the CONSOLE: }
	    IF NOT FINDSAME(FALSE) THEN
	      EXIT(MOVEFILE); { User doesn't wish to remove the duplicate file }
	    IF NBLOCKS > DIRBLK THEN
	      RISKVOLUME;     { Make sure that a disk isn't indangered }
	    REWRITE(LFIB,TOWHERE); { Open destination file }
	    CHECKRSLT(IORESULT);
	     
	    { Get a pointer to the header of the destination file }
	    LFIBP := GETPTR(LFIB);

	    IF NOT LFIBP^.FISBLKD AND GFIBP^.FISBLKD AND
				   (GFIBP^.FHEADER.DFKIND = TEXTFILE) THEN
	      BEGIN { Disk to character device don't transfer heading }
		NBLOCKS := NBLOCKS-2;
		MOVELEFT(GBUF^[FBLKSIZE+FBLKSIZE],GBUF^,NBLOCKS*FBLKSIZE)
	      END;
	    SINGLEDRIVE := (LFIBP^.FVID <> GFIBP^.FVID) AND
					   (LFIBP^.FUNIT = GFIBP^.FUNIT)
	  END
	ELSE
	  IF SINGLEDRIVE THEN { Allow user to insert destination disk }
	    INSERTVOLUME(LFIBP^.FUNIT,LFIBP^.FVID,FALSE);
	NUMBLKS := BLOCKWRITE(LFIB,GBUF^,NBLOCKS,RELBLK);
	CHECKRSLT(IORESULT);
	IF NBLOCKS <> NUMBLKS THEN
	  MESSAGES(FILEFULL,TRUE);   { Wasn't able to write out all the blocks }
	IF SINGLEDRIVE AND NOT EOF(GFIB) THEN
	   { Allow user to insert source disk }
	   INSERTVOLUME(LFIBP^.FUNIT,GFIBP^.FVID,FALSE);
	RELBLK := RELBLK + NUMBLKS   { Increment relative block to the file }
      UNTIL (RELBLK = LASTBLK) OR EOF(GFIB);
      WITH LFIBP^,GFIBP^.FHEADER DO
	BEGIN  { Make the headers to the two files the same }
	  FHEADER.DLASTBYTE := DLASTBYTE;
	  FHEADER.DFKIND := DFKIND;
	  FHEADER.DACCESS := DACCESS;
	  IF (DACCESS.MONTH = 0) AND (THEDATE.MONTH > 0) THEN
	    FHEADER.DACCESS := THEDATE
	END;
      CLOSE(LFIB,LOCK);
      CHECKRSLT(IORESULT);
      PRINTMESS(GFIBP^.FVID,GFIBP^.FHEADER.DTID,
		      CONCAT(LFIBP^.FVID,':',LFIBP^.FHEADER.DTID));
      CLOSE(GFIB);
    END;

  BEGIN { TRANSFER }
    REPEAT
      CHECKFILE('Transfer','To where',0,FILEVOLEXP,TRUE,TRUE,
			       [BADDIR,OKFILE,OKDIR,UNBLKDVOL]);
      LASTBLK := MAXINT;   { Will be set to the # of blocks to transfer }
      LOC := 0;
      IF (STRING1 = '') AND NOT WILDCARD THEN
	BEGIN     { Disk to disk binary transfer }
	  IF LASTSTATE IN [OKDIR,BADDIR] THEN
	    GETBLOCKS('Transfer','blocks','# of blocks to transfer',1,LASTBLK);
	  MOVEFILE
	END
      ELSE
	WHILE SEARCHDIR('Transfer',LOC,TRUE,TRUE,TRUE) DO
	  MOVEFILE
    UNTIL INSTRING = '';
  END { TRANSFER };

  { Allows the user to create file(s) on the disk }
  PROCEDURE MAKEFILE;
  VAR
  GFIB : UNTYPED;
  GFIBP : FIBP;

  BEGIN { MAKEFILE }
    REPEAT
      CHECKFILE('Make','',1,FILEEXP,FALSE,TRUE,[BADFILE,OKFILE]);
      IF FINDSAME(TRUE) THEN       { Check for an existing file with this name }
	BEGIN
	  REWRITE(GFIB,FROMWHERE); { Open the file }
	  CHECKRSLT(IORESULT);
	  GFIBP := GETPTR(GFIB);   { Get a pointer to the header of the file }
	  WITH GFIBP^ DO  { Need to be sure the file is of the correct size }
	    FMAXBLK := FHEADER.DLASTBLK-FHEADER.DFIRSTBLK;
	  CLOSE(GFIB,LOCK);
	  CHECKRSLT(IORESULT);
	  CLEARLINE;
	  WRITELN(GVID,':',GTID,' made')
	END
    UNTIL INSTRING = ''
  END {MAKEFILE} ;
