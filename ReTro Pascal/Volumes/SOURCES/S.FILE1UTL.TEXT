
{.fs} { --- original source filename: FILER.VARS.TEXT --- }

CONST 
  DIRLASTBLK    = 6;      DUPDIRLASTBLK = 10;     SHSTRLENG = 25;
  MAXTITLE      = 40;     HALFMAXDIR    = 39;

  VOLONLINE     = 1013;   FILEUNBLKDEXP = 1020;   NOWRK         = 1027;
  TEXTLOST      = 1014;   FILEBLKDEXP   = 1021;   NOWILD        = 1028;
  CODELOST      = 1015;   FILEVOLEXP    = 1022;   BADFORM       = 1029;
  FOUNDFILE     = 1016;   VOLEXP        = 1023;   ILLFILEVOL    = 1030;
  BLKDEXP       = 1017;   FILEFULL      = 1024;   ILLCHANGE     = 1031;
  UNBLKDEXP     = 1018;   WRKSAVED      = 1025;   BADDEST       = 1032;
  FILEEXP       = 1019;   NODIR         = 1026;   BLKD          = 1033;
						  UNBLKD        = 1034;

TYPE
  UNTYPED  = FILE;

  TIDRANGE = 0..TIDLENG;

  MATCHES  = (FILEFOUND, NOFILES, FILESNOGOOD, ABORTIT);
  LOCATION = (SOURCE,DESTINATION,NEITHER);
  CHECKS   = (BADTITLE, BADUNIT, NOVOL, BADDIR,
	      BADFILE, UNBLKDVOL, OKDIR, OKFILE);

  CHCKS    = SET OF CHECKS;

  LONGSTRING  = STRING[255];
  SHORTSTRING = STRING[SHSTRLENG];
  STRNG       = STRING[MAXTITLE];

  ABLOCK      = ARRAY [0..255] OF INTEGER;

  BITMAP      = PACKED RECORD
		  DIRENTRY : PACKED ARRAY [DIRRANGE] OF BOOLEAN;
		  ENTRIES : DIRRANGE;
		END;


VAR
  GBUFBLKS             : INTEGER;      { Blocks available in transfer buffer   }
  SOURCEUNIT, DESTUNIT,                { Units related to source & dest. files }
  GUNIT                                { Unit # that last volsearch returned   }
		       : UNITNUM;

  CH                   : CHAR;         { General purpose chararcter            }

  GDIR                 : DIRP;         { Pointer to the directory in use       }
  LFIBP                : FIBP;         { Pointer to the header of file LFIB    }

  FAST,                                { SYSCOM^ [NOT SLOWTERM & (WIDTH > 79)] }
  MARKING,                             { Must use STATUS bit in directory      }
  QUESTION, WILDCARD,                  { Is wildcard option being used ?       }
  TEXTSAVED, CODESAVED                 { Workfiles saved ?                     }
		       : BOOLEAN;

  LASTSTATE            : CHECKS;        { State of last call to scaninput      }
  FOUND                : MATCHES;       { Result of dir. search for a file     }

  GBUF                 : WINDOWP;       { Pointer to the transfer buffer       }

  GKIND                : FILEKIND;      { Filetype (e.g., TEXT,CODE,DATA...)   }

  DIRMAP               : BITMAP;        { Keeps track of the files to be used  }
                                        { in a wildcard operation              }

  BLOCKPTR             : ^ABLOCK;       { Pointer to one-block of data         }

  LFIB                 : UNTYPED;       { General purpose file                 }

  VOLNAME1, VOLNAME2,                   { Volume names of source & destination }
                                        { files respectively, as inputted      }
  DESTVID, SOURCEVID,                   { Explicit volume name associated with }
                                        { source & dest units respectively     }
  GVID,                                 { Last volname returned by scaniput    }
  GVID2                                 { Last volname entered into scaniput   }
                       : VID;

  SOURCETITLE,                          { Source file with exlicit volume name }
  STRING2,STRING4,                      { Suffix strings to wildcards          }
  GTID                                  { Last title returned by scaniput      }
                       : TID;

  STRING1, STRING3     : SHORTSTRING;   { Prefix strings to wildcards          }
  MONTHSTR             : STRING[48];    { Contains abbr. for the months        }
  TYPESTR              : STRING[32];    { Contains abbr. for the file types    }
  FROMWHERE, TOWHERE   : STRNG;         { Source & destination files           }
  INSTRING             : LONGSTRING;    { Input string                         }

{.fs} { --- original source filename: FILER.A.TEXT --- }

{     Copyright (C) 1979 Regents of the University of California.     }
{     Permission to copy or distribute this software or documen-      }
{     tation in hard or soft copy granted only by written license     }
{     obtained from the Institute for Information Systems.            }

{******************************************************************************}
{******************************************************************************}

  { This procdure is called in an infinite loop. Used to exit from when an     }
  { error condition is encountered. Will return to main FILER prompt line      }
  PROCEDURE CALLPROC;
    FORWARD;

  { Trick procedure used to change a pointer to a UNTYPED file to a pointer to }
  { the header of that file FIBP                                               }
  FUNCTION GETPTR(VAR DUMMY : UNTYPED) : FIBP;  { DUMMY is placed on the stack }
  VAR
    TRIX : ARRAY [0..0] OF FIBP;                { TRIX is placed on the stack  }
  BEGIN
    GETPTR := TRIX[-1]                          { We access DUMMY as TYPE FIBP }
  END;

{******************************************************************************}
{******************************************************************************}

  { Initializes global variables for the FILER }
  PROCEDURE INITGLOBALS;
  BEGIN
    GVID := '';
    STRING1 := '';
    STRING2 := '';
    STRING3 := '';
    STRING4 := '';
    TOWHERE := '';
    VOLNAME1 := '';
    VOLNAME2 := '';
    FROMWHERE := '';
    SOURCEVID := '';
    DESTVID := '';
    SOURCEUNIT := 0;
    DESTUNIT := 0;
    FOUND := NOFILES;
    WILDCARD := FALSE;
    QUESTION := FALSE;
    FILLCHAR(DIRMAP,SIZEOF(DIRMAP),0)
  END;

{-------------------------- FILER ERROR MESSAGES ------------------------------}

  { Writes out most FILER related and I/O errors. If NUMBER <> 0 and EXXIT }
  { then this procedure will return to the FILER prompt line               }
  PROCEDURE MESSAGES(NUMBER : INTEGER; EXXIT : BOOLEAN);
  VAR
    STR : STRING[40];
  BEGIN
    STR := '';

    {----------------- I/O ERRORS --------------------}
    CASE NUMBER OF
      1 : STR := 'Parity (CRC) error';
      2 : STR := 'Bad unit number';
      3 : STR := 'Bad I/O operation';
      4 : STR := 'Timeout error';
      5 : STR := 'Vol went off-line';
      6 : STR := 'File lost in dir';
      7 : STR := 'Bad file name';
      8 : STR := 'No room on vol';
      9 : STR := 'No such vol on-line';
      10: STR := 'File not found';
    END;

    {------------ FILER RELATED ERRORS ---------------}
    CASE NUMBER OF
      1013: STR := 'Vol already on-line';
      1014: STR := 'Text file lost';
      1015: STR := 'Code file lost';
      1016: STR := 'File found';
      1017,1033: STR := 'Blkd vol';
      1018,1034: STR := 'Ublkd vol';
      1019: STR := 'File name';
      1020: STR := 'File/(unblkd vol)';
      1021: STR := 'File/(blkd vol)';
      1022: STR := 'File/vol';
      1023: STR := 'Vol name';
      1024: STR := 'Output file full';
      1025: STR := 'Workfile is saved';
      1026: STR := 'No directory on vol';
      1027: STR := 'No workfile to save';
      1028: STR := 'Wildcard not allowed';
      1029: STR := 'Bad format (Wildcard <to> Non-Wildcard)';
      1030: STR := 'Illegal file/vol name';
      1031: STR := 'Illegal change (Vol <to> file) name';
      1032: STR := 'Bad dest for files found'
    END;
    IF NUMBER IN [1017..1023] THEN
      STR := CONCAT(STR,' expected');
    CLEARLINE;
    IF (NUMBER > 10) AND (NUMBER < 1000) OR SYSCOM^.MISCINFO.SLOWTERM THEN
      WRITE('I/O error #',NUMBER)  { Misc. I/O error. Print out error # only }
    ELSE
      WRITE(STR);
    IF EXXIT THEN
      EXIT(CALLPROC)
  END;

  { Checks for selected I/O errors. Will print out error and }
  { return to FILER prompt line if one is found              }
  PROCEDURE CHECKRSLT(RSLT : INTEGER);
  BEGIN
    IF (RSLT > 0) AND NOT (RSLT IN [13,14]) THEN
      MESSAGES(RSLT,TRUE)
  END;

{------------------------ Widely used command sequences -----------------------}

  { Performs a writeln followed by a clearline }
  PROCEDURE WRITEANDCLEAR;
  BEGIN
    WRITELN;
    CLEARLINE
  END;

  { Reads a character from INPUT. Returns true if the character was a ('Y','y')}
  { false otherwise. Exits to prompt line if the character was an <ESC>. Will  }
  { position cursor at start of next line if all went o.k.                     }
  FUNCTION NGETCHAR(FLUSH : BOOLEAN) : BOOLEAN;
  BEGIN
{.fs# CH := GETCHAR(FLUSH); }
{.fs} CH := GETCHAR(FALSE); { no flush for first attempt }
{.fs} WHILE (CH <> 'N') AND (CH <> 'Y') AND (CH <> SYSCOM^.CRTINFO.ALTMODE) DO
{.fs} BEGIN
{.fs}   IF (NOT EOLN) AND (CH >= ' ') THEN WRITE(CHR(8),' ',CHR(8)); { remove it }
{.fs}   CH := GETCHAR(FLUSH)  { try again, flush since we may be simulating keys }
{.fs} END;
    IF (CH = SYSCOM^.CRTINFO.ALTMODE) THEN
      EXIT(CALLPROC);
    NGETCHAR := CH = 'Y';
    IF NOT EOLN THEN
      WRITELN
  END;

  { Asks the user to type a space to continue. Will return to the FILER prompt }
  { line if the user responds with an <ESC>. If FLUSH then precludes type-ahead}
  PROCEDURE NSPACEWAIT(FLUSH : BOOLEAN);
  BEGIN
    IF SPACEWAIT(FLUSH) THEN
      EXIT(CALLPROC)
  END;

  { Used to update directory and checks the I/O result }
  PROCEDURE UPDATEDIR;
  BEGIN
    WRITEDIR(SOURCEUNIT,GDIR);
    CHECKRSLT(IORESULT)
  END;

{------------------ Miscellaneous Grundge Procedures --------------------------}

  { Removes spaces and unprintable characters from input string. }
  { Changes all lower-case characters to upper-case              }
  PROCEDURE EATSPACES(VAR STRG : LONGSTRING);
  VAR
    I : INTEGER;

  BEGIN
    I := 1;
    WHILE I <= LENGTH(STRG) DO
      IF (ORD(STRG[I]) >= 33) AND (ORD(STRG[1]) <= 125) THEN
        BEGIN
	  IF (STRG[I] >= 'a') AND (STRG[I] <= 'z') THEN
	    STRG[I] := CHR( ORD( STRG[I] ) - ORD( 'a' ) + ORD ('A' ));
	  I := I + 1
	END
      ELSE
	DELETE(STRG,I,1);
    IF STRG = '' THEN
      EXIT(CALLPROC);
  END;

  { Ascertains the correct block number for procedures to use at a given time }
  { If a valid DEOVBLK exists on the present directory then the user will be  }
  { asked if that value is the correct one. Otherwise a valid block must be   }
  { entered. For a block to be valid it must be >= LASTBLK                    }
  PROCEDURE GETBLOCKS(MESS1,MESS2,MESS3 : SHORTSTRING; LASTBLK: INTEGER; 
					VAR NBLOCKS: INTEGER);
  VAR
    OK : BOOLEAN;
  BEGIN
    OK := FALSE;
    IF GDIR <> NIL THEN
      IF GDIR^[0].DEOVBLK >= LASTBLK THEN
	BEGIN
	  CLEARLINE;
	  WRITE(MESS1,' ',GDIR^[0].DEOVBLK,' ',MESS2,' ? (Y/N) ');
	  OK := NGETCHAR(TRUE);
	  NBLOCKS := GDIR^[0].DEOVBLK
	END;
    IF NOT OK THEN
      BEGIN
	CLEARLINE;
	WRITE(MESS3,' ? ');
	READLN(NBLOCKS);
	IF NBLOCKS < LASTBLK THEN
	  BEGIN
	    CLEARLINE;
	    WRITE('Invalid #');
	    EXIT(CALLPROC)
	  END;
      END
  END;

  { Ascertains if the user really wants to destroy the directory of a disk  }
  { If the user doesn't this procedure will return to the FILER prompt line }
  PROCEDURE RISKVOLUME;
  BEGIN
    IF (LASTSTATE = OKDIR) AND (GDIR <> NIL) THEN
      BEGIN
	CLEARLINE;
	WRITE('Destroy ',GVID,': ? ');
	IF NOT NGETCHAR(TRUE) THEN
	  EXIT(CALLPROC)
      END
  END;

{.fs} { --- original source filename: FILER.B.TEXT --- }

{     Copyright (C) 1979 Regents of the University of California.     }
{     Permission to copy or distribute this software or documen-      }
{     tation in hard or soft copy granted only by written license     }
{     obtained from the Institute for Information Systems.            }

{----------------------- SPECIALIZED FILER ROUTINES ---------------------------}

  { Ascertains whether or not the proper disk is in the proper drive }
  { If it is not will ask user to put the disk in the proper drive   }
  { If the user does not do so this procedure will return to the     }
  { FILER prompt line                                                }
  PROCEDURE INSERTVOLUME(INTUNIT : INTEGER; VID1 : VID; CHECK : BOOLEAN);
  VAR
    OK : BOOLEAN;
    OLDUNIT, NEWUNIT : VID;

  BEGIN { INSERTVOLUME }
    OLDUNIT := '#  ';
    IF (INTUNIT DIV 10) = 1 THEN
      OLDUNIT[2] := '1';
    OLDUNIT [3] := CHR(ORD('0') + INTUNIT MOD 10);
    EATSPACES(OLDUNIT);
    OK := CHECK;
    IF CHECK THEN   { Need to make sure the disk is in the drive }
      IF VOLSEARCH(VID1,TRUE,GDIR) <> INTUNIT THEN  { Volume in proper drive }

	{ Kludge !!!!!! Force the OP-SYSTEM to look at the correct unit }
	{ If there are two vols with the same name on line it won't be  }
	{ able to find the one on the lower drive otherwise             }

	BEGIN   { Volume was not in proper drive. Where is it ? }
	  NEWUNIT := OLDUNIT;
	  OK := VOLSEARCH(NEWUNIT,TRUE,GDIR) <> 0; { 0 means unit not found }
	  OK := OK AND (NEWUNIT = VID1)  { Is this the correct volume ? }
	END;
    IF NOT OK THEN

      { Repeat the above after asking the user to put in the correct disk }

      BEGIN
	CLEARLINE;
	WRITELN('Put ',VID1,': in unit ',OLDUNIT);
	NSPACEWAIT(TRUE);
	IF CHECK THEN
	  BEGIN
	    OK := (VOLSEARCH(OLDUNIT,TRUE,GDIR) <> 0);
	    IF (NOT OK) OR (OLDUNIT <> VID1) THEN
	      EXIT(CALLPROC)
	  END
      END
  END { INSERTVOLUME };

  { Scans through DIRMAP for files to be deleted and updates the  }
  { directory on the source unit correspondingly                  }
  PROCEDURE ZAPENTRIES(DIRMAP : BITMAP; UPDATE : BOOLEAN);
  VAR
    LOC : INTEGER;
  BEGIN
    IF DIRMAP.ENTRIES > 0 THEN
      BEGIN

	{ Make sure that the correct disk is in the drive }
	INSERTVOLUME(SOURCEUNIT,SOURCEVID,TRUE);

	IF GDIR <> NIL THEN
	  BEGIN
	    FOR LOC := GDIR^ [0].DNUMFILES DOWNTO 1 DO
	      IF DIRMAP.DIRENTRY [LOC] THEN
		DELENTRY(LOC,GDIR);  { Deletes file at LOC in the directory }
	    IF UPDATE THEN
	      UPDATEDIR              { Writes the directory out to disk     }
	  END
      END;
  END;

  { Purges the file requested by NAME from the directory. If the }
  { file exists and MESS <> '' then will ask you to confirm      }
  FUNCTION PURGEIT(NAME,MESS : SHORTSTRING):BOOLEAN;
  VAR
    GFIB : FILE;
  BEGIN
    RESET(GFIB,NAME);
    PURGEIT := IORESULT = 0;
    IF IORESULT = 0 THEN  { Result of 0 means that the file was found }
      BEGIN
	IF MESS <> '' THEN
	  BEGIN
	    CLEARLINE;
	    WRITE(MESS,' ',NAME,' ? ');
	    IF NOT NGETCHAR(TRUE) THEN
	      BEGIN
		PURGEIT := FALSE;      { User does not wish to remove the file }
		EXIT(PURGEIT)
	      END
	  END;
	CLOSE(GFIB,PURGE);
	CHECKRSLT(IORESULT)
      END;
  END;

  { Lets user know what is being done to his file }
  PROCEDURE PRINTMESS(VID1 : VID; TID1 : TID; DEST : SHORTSTRING);
  BEGIN
    CLEARLINE;
    WRITE(VID1,':',TID1);
    IF (LENGTH(DEST) + 31) > SYSCOM^.CRTINFO.WIDTH THEN
      WRITEANDCLEAR
    ELSE
      IF NOT SYSCOM^.MISCINFO.SLOWTERM THEN
	WRITE('':24-(LENGTH(VID1)+LENGTH(TID1)));
    WRITELN(' --> ',DEST)
  END;
