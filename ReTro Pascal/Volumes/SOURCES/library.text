
{.fs} {$L LIBRARY.LIST[*]} { LIST file helps debugging (has all proc nos etc.) }

{$C COPYRIGHT (C) 1979 Regents of the University of California. LIBRARY II.764}

        (*******************************************************************)
        (*                                                                 *)
        (*  Copyright (c) 1979 Regents of the University of California.    *)
        (*  Permission to copy or distribute this software or documen-     *)
        (*  tation in hard or soft copy granted only by written license    *)
        (*  obtained form the Institute for Information Systems.           *)
        (*                                                                 *)
        (*******************************************************************)

{*************************************}
{*                                   *}
{*      Pascal System Librarian      *}
{*          (Version II.0)           *}
{*                                   *}
{*      I.5 release version          *}
{*        written Summer '78         *}
{*        by Roger Sumner            *}
{*                                   *}
{*      Modified March 1979          *}
{*        by Gary Dismukes           *}
{*      to handle byte-flipped       *}
{*      files;                       *}
{*      also Procedure Copyinterface *}
{*      rewritten.                   *}
{*                                   *}
{*************************************}
{.fs# (*$S+,U-,F+*)}    { FLIP?? $U- only used to get ERASEEOL char }
{.fs} (*$G+*)           { allow GOTO }

{.fs} PROGRAM SYSTEMLIBRARIAN;

CONST
     MAXSEG = 15;	(*MAX CODE SEGMENT NUMBER*)

TYPE
					(*CODE SEGMENT LAYOUTS*)

     SEGRANGE = 0..MAXSEG;
     SEGDESC = RECORD
		 DISKADDR: INTEGER;	(*REL BLK IN CODE...ABS IN SYSCOM^*)
		 CODELENG: INTEGER	(*# BYTES TO READ IN*)
	       END (*SEGDESC*) ;
					(*SYSTEM COMMUNICATION AREA*)
					(*SEE INTERPRETERS...NOTE  *)
					(*THAT WE ASSUME BACKWARD  *)
					(*FIELD ALLOCATION IS DONE *)

{.fs#  --- no need to pull in SYSCOMREC at all ---
     SYSCOMREC = RECORD
		   IORSLT: INTEGER ;	(*RESULT OF LAST IO CALL*)
		   XEQERR: INTEGER;	(*REASON FOR EXECERROR CALL*)
		   SYSUNIT: INTEGER;	(*PHYSICAL UNIT OF BOOTLOAD*)
		   BUGSTATE: INTEGER;	(*DEBUGGER INFO*)
		   GDIRP: INTEGER;	
		   LASTMP,STKBASE,BOMBP: INTEGER;
		   MEMTOP,SEG,JTAB: INTEGER;
		   BOMBIPC: INTEGER;	(*WHERE XEQERR BLOWUP WAS*)
		   HLTLINE: INTEGER;	(*MORE DEBUGGER STUFF*)
		   BRKPTS: ARRAY [0..3] OF INTEGER;
		   RETRIES: INTEGER;	(*DRIVERS PUT RETRY COUNTS*)
		   EXPANSION: ARRAY [0..8] OF INTEGER;
		   HIGHTIME,LOWTIME: INTEGER;
		   MISCINFO: PACKED RECORD
			       NOBREAK,STUPID,SLOWTERM,
			       HASXYCRT,HASLCCRT,HAS8510A,HASCLOCK: BOOLEAN
			     END;
		   CRTTYPE: INTEGER;
		   CRTCTRL: PACKED RECORD
			      RLF,NDFS,ERASEEOL,ERASEEOS,HOME,ESCAPE: CHAR;
			      BACKSPACE: CHAR;
			      FILLCOUNT: 0..255;
			      EXPANSION: PACKED ARRAY [0..3] OF CHAR
			    END;
		   CRTINFO: PACKED RECORD
			      WIDTH,HEIGHT: INTEGER;
			      RIGHT,LEFT,DOWN,UP: CHAR;
			      BADCH,CHARDEL,STOP,BREAK,FLUSH,EOF: CHAR;
			      ALTMODE,LINEDEL: CHAR;
			      EXPANSION: PACKED ARRAY [0..5] OF CHAR
			    END;
		   SEGTABLE: ARRAY [SEGRANGE] OF
			       RECORD
				 CODEUNIT: INTEGER;
				 CODEDESC: SEGDESC
			       END
		 END (*SYSCOM*);

VAR
    SYSCOM: ^SYSCOMREC;			(*MAGIC PARAM...SET UP IN BOOT*)
}

{.fs# SEGMENT PROCEDURE LIBRARIAN(III,JJJ: INTEGER); }  { no need for system mode }

PROCEDURE LIBRARIAN;

CONST
  WINDOW = 2;
  ERROR = 23;
  MARKCODE = 15;
  MARKIN = 5;


TYPE
     BLOCK0P = ^BLOCK0;
     BLOCK0 = RECORD
		SEGDSC: ARRAY [SEGRANGE] OF SEGDESC;
		SEGNAME: ARRAY [SEGRANGE] OF
			   PACKED ARRAY [0..7] OF CHAR;
		SEGKIND: ARRAY [SEGRANGE] OF INTEGER;
		EXTRA: ARRAY [SEGRANGE] OF INTEGER;
		FILLER: ARRAY [1..88] OF INTEGER;
		NOTICE: STRING[79]
	      END;


VAR NBLOCKS,RSLT,OUTBLOCK: INTEGER;
    BUF: BLOCK0P;
    DSEG,SSEG: SEGRANGE;
    PL,TITLE: STRING;
    CODETBL: BLOCK0;
    CODE,INFILE: FILE;
    firstfile, flipped: Boolean;


procedure byteswap(var word: integer);
  var  temp1,temp2: packed record
		      case boolean of
			TRUE:  (val: integer);
			FALSE: (lowbyte: 0..255;
				highbyte:0..255);
		    end;
begin
  temp1.val:= word;
  temp2.lowbyte:= temp1.highbyte;
  temp2.highbyte:= temp1.lowbyte;
  word:= temp2.val;
end;

Function Table_flipped( var Table: block0 ): Boolean;
  label 1;
  var s: segrange;
      highbyte: 0..1;
      int: record
	     case boolean of
	       TRUE: (val: integer);
	       FALSE:(byte: packed array [0..1] of 0..255)
	     end;
begin
  Table_flipped := FALSE;
  {First determine sex of this machine}
  int.val := 1;
  highbyte := ord(int.byte[0] = 1);

  for s:= 0 to MAXSEG do
    with Table.segdsc[s] do
    begin
      int.val:= diskaddr;
      if int.byte[highbyte] <> 0 then
      begin
	Table_flipped:= TRUE;
	goto 1;
      end;
    end;
1:end;

procedure fliptable(var table: block0);
  var  s: segrange;
begin
  for s := 0 to MAXSEG do
    with table, segdsc[s] do
    begin
      byteswap(diskaddr);
      byteswap(codeleng);
      byteswap(segkind[s]);
      byteswap(extra[s]);
    end;
end;

PROCEDURE NEWLINKER;

VAR CCH: CHAR;
    INTBL: BLOCK0P;
    NTITLE: STRING;
    CODETABLE: BLOCK0P;
    PL: STRING;

PROCEDURE PROMPT(AT: INTEGER);
BEGIN
  GOTOXY(0,AT);
  IF AT = ERROR THEN WRITE(CHR(7));
  WRITE(PL);
{.fs# WITH SYSCOM^.CRTCTRL DO WRITE(ESCAPE,ERASEEOL); } { avoid SYSCOM }
  WRITE(CHR(29));   { ERASEEOL }
END;

FUNCTION CHECKIO:BOOLEAN;
VAR RSLT:INTEGER;
BEGIN
  CHECKIO:=IORESULT=0;
  IF IORESULT <> 0 THEN
    BEGIN
      RSLT:=IORESULT;
      PL := 'I/O error # ';
      PROMPT(ERROR);
      WRITE(OUTPUT,RSLT);
    END;
END; (* CHECKIO *)

{.fs} { append an extension to a file name if it is not there }
{.fs} { based on EDITOR source }
{.fs} { This is a straight copy from RETROSTUFF so we don't need an extra segment. }
{.fs} PROCEDURE APPENDEXTENSION(VAR FILENAME: STRING; EXT: STRING);
{.fs}   VAR I, XLEN: INTEGER;
{.fs}   FUNCTION UCLC(CH:CHAR):CHAR; (* Map Lower Case to Upper Case *)
{.fs}   BEGIN { from EDITOR source }
{.fs}     IF CH IN ['a'..'z'] THEN UCLC:=CHR(ORD(CH)-32) ELSE UCLC:=CH
{.fs}   END;
{.fs}   FUNCTION ENDSWITH(S, SUFFIX: STRING): BOOLEAN;
{.fs}     VAR I: INTEGER;
{.fs}   BEGIN
{.fs}     I:=POS(SUFFIX,S)-1;
{.fs}     ENDSWITH:=(I>0) AND (I=LENGTH(S)-LENGTH(SUFFIX));
{.fs}   END;
{.fs} BEGIN
{.fs}   IF FILENAME='' THEN EXIT(APPENDEXTENSION);
{.fs}   FOR I:=1 TO LENGTH(FILENAME) DO FILENAME[I]:=UCLC(FILENAME[I]); { up-case }
{.fs}   IF (ENDSWITH(FILENAME,'.LIBRARY')) AND (EXT='.CODE') THEN
{.fs}     EXIT(APPENDEXTENSION);    { .LIBRARY files are also code }
{.fs}   XLEN:=LENGTH(EXT)-1;
{.fs}   IF (NOT ENDSWITH(FILENAME,EXT)) AND                 { tail is not ext }
{.fs}      (FILENAME[LENGTH(FILENAME)]<>'.') AND            { final . inhibits }
{.fs}      (FILENAME[LENGTH(FILENAME)]<>':') THEN           { volume name }
{.fs}     FILENAME:=CONCAT(FILENAME,EXT);
{.fs}   IF FILENAME[LENGTH(FILENAME)]='.' THEN              { remove inhibitor }
{.fs}     DELETE(FILENAME,LENGTH(FILENAME),1);
{.fs} END;

PROCEDURE OPENFILE;
BEGIN
  REPEAT
    PL := 'Link Code File -> ';
    PROMPT(4);
{.fs} NTITLE:='..CODE,.LIBRARY'; NTITLE[1]:=CHR(3); { completion for code/lib }
    READLN(INPUT,NTITLE);
    if ntitle = '*' then
      ntitle:= '*SYSTEM.LIBRARY';
{.fs} APPENDEXTENSION(NTITLE,'.CODE'); { consistent handling of file extensions }
    IF LENGTH(NTITLE) > 0 THEN
      BEGIN
	TITLE := NTITLE;
	RESET(INFILE,NTITLE);
      END;
  UNTIL (CHECKIO) OR (LENGTH(NTITLE) = 0);
END (*OPENFILE*) ;

PROCEDURE DISPLAY(AT: INTEGER; WHAT: BLOCK0P);
VAR
  T: INTEGER;
BEGIN
  GOTOXY(0,AT);
  WITH WHAT^ DO
    FOR T := 0 TO 3 DO
      BEGIN
	WRITE(T:3,'-',SEGNAME[T],SEGDSC[T].CODELENG:6);
	WRITE(T+4:5,'-',SEGNAME[T+4],SEGDSC[T+4].CODELENG:6);
	WRITE(T+8:5,'-',SEGNAME[T+8],SEGDSC[T+8].CODELENG:6);
	WRITELN(T+12:5,'-',SEGNAME[T+12],SEGDSC[T+12].CODELENG:6)
      END;
  PL := 'Code file length - ';
  PROMPT(12);
  WRITE(OUTPUT,OUTBLOCK);
END;


PROCEDURE LINKCODE;
  VAR NBLOCKS: INTEGER;

  PROCEDURE LINKIT;

    PROCEDURE COPYLINKINFO(INFOBLK: INTEGER);
      VAR N, NRECS: INTEGER;
	  DONE: BOOLEAN;
	  REC: ARRAY [0..7] OF INTEGER;
	  BUF: ARRAY [0..31, 0..7] OF INTEGER;

	PROCEDURE GETREC;
	BEGIN
	  IF NRECS = 0 THEN
	    IF BLOCKREAD(INFILE, BUF, 1, INFOBLK) <> 1 THEN
	      BEGIN
		PL := 'Link info read err';
		PROMPT(ERROR);
		DONE := TRUE
	      END
	    ELSE
	      IF BLOCKWRITE(CODE, BUF, 1, OUTBLOCK) <> 1 THEN
		BEGIN
		  PL := 'Code file overflow';
		  PROMPT(ERROR);
		  DONE := TRUE
		END
	      ELSE
		BEGIN
		  OUTBLOCK := OUTBLOCK+1;
		  INFOBLK := INFOBLK+1;
		  NRECS := 32
		END;
	  IF NOT DONE THEN
	    REC := BUF[32-NRECS];
	  NRECS := NRECS-1
	END { GETREC } ;

    BEGIN { COPYLINKINFO }
      NRECS := 0; DONE := FALSE;
      REPEAT
	GETREC;
	if flipped then
	  byteswap(rec[4]);
	IF NOT (REC[4] IN [0..14]) THEN
	  BEGIN
	    PL := 'Bad link info';
	    PROMPT(ERROR);
	    REC[4] := 0
	  END;
	DONE := REC[4] = 0;
	IF NOT DONE THEN
	  IF REC[4] IN [1..5,13,14] THEN
	    BEGIN { COPY REF LIST }
	      if flipped then
		byteswap(rec[6]);
	      N := (REC[6]+7) DIV 8;
	      WHILE N > 0 DO
		BEGIN GETREC; N := N-1 END
	    END
      UNTIL DONE
    END { COPYLINKINFO } ;

      Procedure Copyinterface (start: integer);
        { Rewritten March 4, 1979 by G. Dismukes for II.0 }
	var blkcount, ifsize: integer;
            done: Boolean;
	    buf: packed array [0..1023] of char;
      begin
{.fs#   if (start <= 0) or (start > 200) then } { bug, cf. Apple Pascal 1.2 doc }
{.fs}   if start <= 0 then
	  exit(Copyinterface);
	ifsize:= intbl^.segdsc[sseg].diskaddr - start;
	if (ifsize <= 0) or odd(ifsize) then
	begin
	  pl:= 'Interface error';
	  prompt(error);
	  exit(Copyinterface);
	end;
	codetable^.extra[dseg]:= outblock;
	done:= FALSE;
	blkcount:= 0;
	repeat
	  if blockread(infile, buf, 2, start+blkcount) <> 2 then
	  begin
	    pl:= 'Interface read err';
	    prompt(error);
	    done:= TRUE;
	  end
	  else
	    if blockwrite(code, buf, 2, outblock) <> 2 then
	    begin
	      pl:= 'Interface write err';
	      prompt(error);
	      done:= TRUE;
	    end
	    else
	    begin
	      outblock:= outblock + 2;
	      blkcount:= blkcount + 2;
	      done:= (blkcount = ifsize);
	    end;
        until done;
      end;

    BEGIN
      WITH INTBL^,SEGDSC[SSEG] DO
	BEGIN
	  CODETABLE^.EXTRA[DSEG] := 0;
	  IF (SEGKIND[SSEG] IN [3,4]) THEN
	    COPYINTERFACE(EXTRA[SSEG]);
	  NBLOCKS := (CODELENG+511) DIV 512;
	  IF BLOCKREAD(INFILE,BUF^,NBLOCKS,DISKADDR) <> NBLOCKS THEN
	    BEGIN
	      PL := 'Error reading seg ';
	      PROMPT(ERROR);
	      WRITE(OUTPUT,SSEG);
	    END
	  ELSE
	    IF BLOCKWRITE(CODE,BUF^,NBLOCKS,OUTBLOCK) <> NBLOCKS THEN
	      BEGIN
		PL := 'I/O error - no room on disk';
		PROMPT(ERROR);
	      END
	    ELSE
	      BEGIN
		CODETABLE^.SEGNAME[DSEG] := SEGNAME[SSEG];
		CODETABLE^.SEGDSC[DSEG].CODELENG := CODELENG;
		CODETABLE^.SEGDSC[DSEG].DISKADDR := OUTBLOCK;
		OUTBLOCK := OUTBLOCK+NBLOCKS;
		IF (SEGKIND[SSEG] < 0) OR (SEGKIND[SSEG] > 4) THEN
		  SEGKIND[SSEG] := 0;
		CODETABLE^.SEGKIND[DSEG] := SEGKIND[SSEG];
		IF SEGKIND[SSEG] <> 0 THEN
		  COPYLINKINFO(DISKADDR+NBLOCKS);
	      END
	END;
      DISPLAY(MARKCODE,CODETABLE);
    END;

FUNCTION CONFIRM: BOOLEAN;
  VAR
    N: INTEGER;
  BEGIN
    CONFIRM:=FALSE;
    (*get segment*)
    N:= 0;
    PL := '';
    PROMPT(WINDOW);
    REPEAT
      READ(CCH);
      IF CCH = CHR(8) THEN
	N := N DIV 10;
      IF CCH IN ['0'..'9'] THEN
	N := N*10 + ORD(CCH)-ORD('0')
    UNTIL NOT (CCH IN [CHR(8),'0'..'9']);
    IF CCH <> ' ' THEN (*probably N or Q*)
      EXIT(CONFIRM);
    IF N IN [0..MAXSEG] THEN (*good segment number*)
      WITH INTBL^ DO
	IF SEGDSC[N].CODELENG > 0 THEN (*any chunk of code*)
	  BEGIN
	    SSEG := N;
	    REPEAT
	      PL := 'Seg to link into? ';
	      PROMPT(WINDOW);
	      READ(DSEG)
	    UNTIL DSEG IN [0..MAXSEG];
	    READ(CCH); { EAT XTRA CHAR }
	    CCH := 'Y'; (* TRICK THE REPLACEMENT BELOW *)
	    IF (CODETABLE^.SEGDSC[DSEG].CODELENG <> 0) THEN (*linking again*)
	      BEGIN
		PL :=
'WARNING - Segment already linked.  Please Reconfirm (y/n) - ';
		PROMPT(WINDOW);
		READ(INPUT,CCH);
		WRITELN(OUTPUT);
	      END;
	    CONFIRM := CCH IN ['Y','y']
	  END;
  END; (* CONFIRM *)

BEGIN
  IF LENGTH(NTITLE)>0 THEN
    IF BLOCKREAD(INFILE,INTBL^,1,0) = 1 THEN
      DISPLAY(MARKIN,INTBL)
    ELSE
      BEGIN
	RSLT:=IORESULT;
	PL := 'Read error # ';
	PROMPT(ERROR);
	WRITE(OUTPUT,RSLT);
      END;
  if firstfile then
    if tableflipped(intbl^) then
    begin
      fliptable(intbl^);
      flipped:= TRUE;
    end
    else
  else
    if flipped <> tableflipped(intbl^) then
    begin
      pl:= 'Incompatible byte sex';
      prompt(error);
    end
    else
      if flipped then
	fliptable(intbl^);
  PL :=
'Segment # to link and <space>, N(ew file, Q(uit, A(bort';
  PROMPT(0);
  REPEAT
    IF CONFIRM THEN
    begin
      if firstfile then
	firstfile:= FALSE;
      LINKIT;
    end;
  UNTIL CCH IN ['N','Q','A','n','q','a'];
  CLOSE(INFILE)
END (*LINKCODE*) ;

BEGIN
  PAGE(OUTPUT);
{.fs# PL := 'Pascal System Librarian [II.0]'; }
{.fs} PL := 'Pascal System Librarian [II.764]';
  PROMPT(0);
  NEW(CODETABLE);
  NEW(INTBL);
  PL := 'Output code file -> ';
  REPEAT
    PROMPT(11);
{.fs} TITLE:='..CODE,.LIBRARY'; TITLE[1]:=CHR(3); { completion for code/lib }
    READLN(INPUT,TITLE);
    if title = '*' then
      title:= '*SYSTEM.LIBRARY';
{.fs} APPENDEXTENSION(TITLE,'.CODE'); { consistent handling of file extensions }
    IF LENGTH(TITLE) = 0 THEN EXIT(LIBRARIAN)
    ELSE REWRITE(CODE,TITLE)
  UNTIL (LENGTH(TITLE) = 0) OR (CHECKIO);
  OUTBLOCK := 1; NEW(BUF);
  IF SIZEOF(BLOCK0) <> 512 THEN
    HALT;
  FILLCHAR(CODETABLE^, SIZEOF(BLOCK0), 0);
  WITH CODETABLE^ DO
    FOR DSEG := 0 TO MAXSEG DO
      SEGNAME[DSEG] := '        ';
  firstfile:= TRUE;
  flipped:= FALSE;
  REPEAT
    OPENFILE;
    LINKCODE;
  UNTIL CCH IN ['Q','q','A','a'];
  IF CCH IN ['A','a'] THEN EXIT(LIBRARIAN);
{.fs# PL := 'Notice? ';             } { somehow broken, temporarily disabling }
{.fs#  PROMPT(23);                  } { Not clear if NOTICE is a STRING[80]   }
{.fs#  READLN(CODETABLE^.NOTICE);   } { or ARRAY [1..80] OF CHAR (compiler)   }
  if flipped then
    fliptable(codetable^);
  IF BLOCKWRITE(CODE,CODETABLE^,1,0) = 1 THEN
    CLOSE(CODE,LOCK)
  ELSE
    WRITELN(OUTPUT,'Code write error ')
END { NEWLINKER } ;

BEGIN
  NEWLINKER
END { LIBRARIAN } ;

{.fs# BEGIN END. }
{.fs} BEGIN LIBRARIAN END.
