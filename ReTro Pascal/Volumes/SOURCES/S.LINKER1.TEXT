
{.fs --- link0 --- }

const
    SYSPROG = 4;

var
    syscom: ^integer;
    gfiles: array [0..5] of integer;
    userinfo: record
		filler: array [0..4] of integer;
		slowterm, stupid: boolean;
		altmode: char;
		gotsym, gotcode: boolean;
		workvid, symvid, codevid: string[7];
		worktid, symtid, codetid: string[15]
	      end;
    filler: array [0..4] of integer;
    syvid, dkvid: string[7];
    junk1, junk2: integer;
    cmdstate: integer;

{
*  The linker is made up of three phases:
*     Phase1 which open all input files, reads up seg tables
*            from them and decides which segments are to be
*            linked into the final code file.
*     Phase2 reads the linker info for each segment that is
*            going to be used, either to select sep procs from
*            or copy with modifications into output code.
*            The main symbol trees are built here, one for each
*            code segment.
*     Phase3 does the crunching of code segments into their
*            final form by figuring out the procs that need to 
*            be linked in, resolves all references (PUBLREF,
*            GLOBREF, etc), patches the code pointed to by their
*            reflists, and writes the final code seg(s).
}

segment procedure linker(iii, jjj: integer);

const
{.fs# HEADER = 'Linker [II.0]'; }
{.fs} HEADER = 'Linker [II.799]';

    MAXSEG = 15;        { max code seg # in code files }
    MAXSEG1 = 16;       { MAXSEG+1, useful for loop vars }
    MASTERSEG = 1;      { USERHOST segment number # }
    FIRSTSEG =  7;      { first linker assignable seg # }
    MAXFILE = 10;       { number of lib files we can use }
    MAXLC = MAXINT;     { max compiler assigned address }
    MAXIC = 20000;      { max number bytes of code per proc }
    MAXPROC = 160;      { max legal procedure number }
    MSDELTA = 12;       { mark stack size for pub/priv fixup }

type

    { subranges }
    { --------- }

    segrange = 0..MAXSEG;       { seg table subscript type }
    segindex = 0..MAXSEG1;      { wish we had const expressions! }
    lcrange = 1..MAXLC;         { base offsets a la P-code }
    icrange = 0..MAXIC;         { legal length for proc/func code }
    procrange = 1..MAXPROC;     { legit procedure numbers }

    { miscellaneous }
    { ------------- }

    alpha = packed array [0..7] of char;
    diskblock = packed array [0..511] of 0..255;
    codefile = file;            { trick compiler to get ^file }
    filep = ^codefile;
    codep = ^diskblock;         { space management...non-PASCAL kludge }

    { link info structures }
    { ---- ---- ---------- }

    placep = ^placerec;         { position in source seg }
    placerec = record
	         srcbase, destbase: integer;
		 length: icrange
	       end { placerec } ;

    refp = ^refnode;            { in-core version of ref lists }
    refnode = record
		next: refp;
		refs: array [0..7] of integer;
	      end { refnode } ;

    litypes = (EOFMARK,         { end-of-link-info marker }
		   { ext ref types, designates      }
		   { fields to be updated by linker }
	       UNITREF,         { refs to invisibly used units (archaic?) }
	       GLOBREF,         { refs to external global addrs }
	       PUBLREF,         { refs to BASE lev vars in host }
	       PRIVREF,         { refs to BASE vars, allocated by linker }
	       CONSTREF,        { refs to host BASE lev constant }
	           { defining types, gives      }
		   { linker values to fix refs  }
	       GLOBDEF,         { global addr location }
	       PUBLDEF,         { BASE var location }
	       CONSTDEF,        { BASE const definition }
	           { proc/func info, assem }
		   { to PASCAL and PASCAL  }
		   { to PASCAL interface   }
	       EXTPROC,         { EXTERNAL proc to be linked into PASCAL }
	       EXTFUNC,         {    "     func "  "    "    "      "    }
	       SEPPROC,         { Separate proc definition record }
	       SEPFUNC,         {   "      func     "        "    }
	       SEPPREF,         { PASCAL ref to a sep proc }
	       SEPFREF);        {   "    ref to a sep func }
    
    liset = set of litypes;
    opformat = (WORD, BYTE, BIG);       { instruction operand field formats }

    lientry = record    { format of link info records }
		name: alpha;
		case litype: litypes of
		  SEPPREF,
		  SEPFREF,
		  UNITREF,
		  GLOBREF,
		  PUBLREF,
		  PRIVREF,
		  CONSTREF:
			(format: opformat;      { how to deal with the refs }
			 nrefs: integer;        { words following with refs }
			 nwords: lcrange;       { size of private or nparams }
			 reflist: refp);        { list of refs after read in }
                  EXTPROC, 
		  EXTFUNC,
		  SEPPROC, 
		  SEPFUNC:
			(srcproc: procrange;    { the procnum in source seg }
			 nparams: integer;      { words passed/expected }
			 place: placep);        { position in source/dest seg }
		  GLOBDEF:
			(homeproc: procrange;   { which proc it occurs in }
			 icoffset: icrange);    { its byte offset in pcode }
		  PUBLDEF:
			(baseoffset: lcrange);  { compiler assign word offset }
		  CONSTDEF:
			(constval: integer);    { users defined value }
		  EOFMARK:
			(nextlc: lcrange)       { private var alloc info }
		end { lientry } ;

    { symbol table items }
    { ------ ----- ----- }

    symp = ^symbol;
    symbol = record
	       llink, rlink,            { binary subtrees for diff names }
	       slink: symp;             { same name, diff litypes }
	       entry: lientry           { actual id information }
	     end { symbol } ;

    { segment information }
    { ------- ----------- }

    segkinds =(LINKED,          { no work needed, executable as is }
	       HOSTSEG,         { PASCAL host program outer block  }
	       SEGPROC,         { PASCAL segment procedure, not host }
	       UNITSEG,         { library unit occurance/reference }
	       SEPRTSEG);       { library separate proc/func TLA segment }

    finfop = ^fileinforec;      { forward type dec }

    segp = ^segrec;             { this structure provides access to all }
    segrec = record             { info for segs to be linked to/from    }
	       srcfile: finfop;         { source file of segment }
	       srcseg: segrange;        { source file seg # }
	       symtab: symp;            { symbol table tree }
	       case segkind: segkinds of
		 SEPRTSEG:
		        (next: segp)    { used for library sep seg list }
	     end { segrec } ;

    { host/lib file access info }
    { ---- --- ---- ------ ---- }

    I5segtbl = record   { first full "block" of all code files }
		 diskinfo: array [segrange] of
			     record
			       codeleng, codeaddr: integer
			     end { diskinfo } ;
                 segname: array [segrange] of alpha;
		 segkind: array [segrange] of segkinds
	       end { I5segtbl } ;

    filekind = (USERHOST, USERLIB, SYSTEMLIB);

    fileinforec = record
		    next: finfop;       { link to next file thats open }
		    code: filep;        { pointer to PASCAL file...sneaky! }
                    fkind: filekind;    { used to validate the segkinds }
		    segtbl: I5segtbl    { disk seg table w/ source info }
		  end { fileinforec } ;


var
    hostfile,           { host file info ptr, its next = libfiles }
    libfiles: finfop;   { list of lib files, user and system }

    seplist: segp;      { list of sep segs to search through }
    reflitypes: liset;  { those litypes with ref lists }

    talkative,
    useworkfile: boolean;

    errcount: integer;
    heapbase: ^integer;

    hostsp: segp;                       { ptr to host prog outer block }
    nextbaselc: lcrange;                { next base offset for private alloc }
    seginfo: array [segrange] of segp;  { seg is available if NIL }
    nextseg: segindex;                  { next slot in seginfo available }

    mapname: string[39];

    code: codefile;                     { output code file, *system.wrk.code   }
                                        { also source of FIB for dynamic files }

    flipped: boolean;                   { are files byte-flipped? }
{
*  Print an error message and bump
*  the error counter.
}

procedure error(msg: string);
  var ch: char;
begin
  writeln(msg);
  repeat
{.fs# writeln('Type <sp>(continue), <esc>(terminate)'); }
{.fs} writeln('Type <space>(continue), <esc>(terminate)');
    read(keyboard, ch);
    if ch = userinfo.altmode then
      exit(linker)
  until ch = ' ';
  errcount := errcount+1
end { error } ;

procedure byteswap(var word: integer);
  var temp1,temp2: packed record
	      case boolean of
		TRUE: (val: integer);
		FALSE: (lowbyte: 0..255;
			highbyte: 0..255)
	    end;
begin
  temp1.val := word;
  temp2.lowbyte := temp1.highbyte;
  temp2.highbyte := temp1.lowbyte;
  word := temp2.val;
end;

{
*  Routines to access object code segments.  There
*  is subtle business involving byte flipping with
*  the 16-bit operations.
}
{$R-}

function fetchbyte(cp: codep; offset: integer): integer;
begin
  fetchbyte := cp^[offset]
end { fetchbyte } ;

function fetchword(cp: codep; offset: integer): integer;
  var i: integer;
begin
  moveleft(cp^[offset], i, 2);
  { byte swap i }
  if flipped then byteswap(i);
  fetchword := i
end { fetchword } ;

procedure storebyte(val: integer; cp: codep; offset: integer);
begin
  cp^[offset] := val
end { storebyte } ;

procedure storeword(val: integer; cp: codep; offset: integer);
begin
  { byte swap val }
  if flipped then byteswap(val);
  moveleft(val, cp^[offset], 2)
end { storeword } ;

procedure storebig(val: integer; cp: codep; offset: integer);
  var  bigword: packed record
		  case boolean of
		    TRUE:  (integ: integer);
		    FALSE: (lowbyte: 0..255;
			    highbyte: 0..255)
		end;
begin
  bigword.integ := val;
  cp^[offset] := bigword.highbyte + 128;
  cp^[offset + 1] := bigword.lowbyte;
end;

{$R+}

{
*  Byte-flip word quantities in segment dictionary
*  for byte-flipped file case on reading and writing
*  segtables.  Called by Phase1 and Phase3.
}

procedure fliptable(var table: I5segtbl);
  var  s: segrange;
       word: record
	       case boolean of
		 TRUE:  (int: integer);
		 FALSE: (kind: segkinds)
	     end;
begin
  for s := 0 to MAXSEG do
    with table, diskinfo[s] do
    begin
      byteswap(codeaddr);
      byteswap(codeleng);
      word.kind := segkind[s];
      byteswap(word.int);
      segkind[s] := word.kind;
    end;
end;

{
*  Enter newsym in symtab tree.  The tree is binary for
*  different names and entries with the same name are entered
*  onto sideways links (slink).  No check is made for dup
*  entry types, caller must do that.  Nodes on slink will
*  always have NIL rlink and llink.
}

procedure entersym(newsym: symp; var symtab: symp);
  var syp, lastsyp: symp;
      useleft: boolean;
begin
  newsym^.llink := NIL;
  newsym^.rlink := NIL;
  newsym^.slink := NIL;
  if symtab = NIL then
    symtab := newsym
  else
    begin { search symtab and add newsym }
      syp := symtab;
      repeat
	lastsyp := syp;
	if syp^.entry.name > newsym^.entry.name then
	  begin syp := syp^.llink; useleft := TRUE end
	else
	  if syp^.entry.name < newsym^.entry.name then
	    begin syp := syp^.rlink; useleft := FALSE end
	  else { equal }
	    begin { add into sideways list }
	      newsym^.slink := syp^.slink;
	      syp^.slink := newsym;
	      lastsyp := NIL;     { already added flag }
	      syp := NIL          { stop repeat loop }
	    end
      until syp = NIL;
      if lastsyp <> NIL then
	begin { add to bottom of tree }
	  if useleft then
	    lastsyp^.llink := newsym
	  else
	    lastsyp^.rlink := newsym
	end
    end { symtab <> NIL }
end { entersym } ;

{
*  Look up name in symtab tree and return pointer
*  to it.  Oktype restricts what litype is
*  acceptable.  NIL is returned if name not found.
}

function symsrch(var name: alpha; oktype: litypes; symtab: symp): symp;
  var syp: symp;
begin
  symsrch := NIL;
  syp := symtab;
  while syp <> NIL do
    if syp^.entry.name > name then
      syp := syp^.llink
    else
      if syp^.entry.name < name then
	syp := syp^.rlink
      else { equal name }
	if syp^.entry.litype <> oktype then
	  syp := syp^.slink
	else { found! }
	  begin symsrch := syp; syp := NIL end
end { symsrch } ;

{
*  Search for the occurance of the unit segment
*  given by name in the list of files in fp.
*  Return the file and segment number in seg.
*  NIL is returned for non-existant units and
*  an error is given.
}

function unitsrch(fp: finfop; var name: alpha; var seg: segrange): finfop;
  label 1;
  var s: segindex;
begin seg := 0;
  while fp <> NIL do
    begin
      with fp^.segtbl do
	for s := 0 to MAXSEG do
	  if segname[s] = name then
	    if segkind[s] = UNITSEG then
	      goto 1;
      fp := fp^.next
    end;
  write('Unit ', name);
  error(' not found');
  s := 0;
1:
  seg := s;
  unitsrch := fp
end { unitsrch } ;

{
*  Alphabetic returns TRUE if name contains all legal
*  characters for PASCAL identifiers.  Used to validate
*  segnames and link info entries.
}

function alphabetic(var name: alpha): boolean;
  label 1;
  var i: integer;
begin
  alphabetic := FALSE;
  for i := 0 to 7 do
    if not (name[i] in ['A'..'Z', '0'..'9', ' ', '_']) then
      goto 1;
  alphabetic := TRUE;
1:
end { alphabetic } ;

{
*  Getcodep is a sneaky routine to point codep's anywhere
*  in memory.  It violates Robot's Rules of Order, but is
*  very useful for dealing with the variable size segments
}

function getcodep(memaddr: integer): codep;
  var r: record
	   case boolean of
	     TRUE:  (i: integer);
	     FALSE: (p: codep)
	   end;
begin
  r.i := memaddr;
  getcodep := r.p
end { getcodep } ;

{.fs --- link1 --- }

    (******************************************************************)
    (*                                                                *)
    (*  Copyright (c) 1979 Regents of the University of California.   *)
    (*  Permission to copy or distribute this software or documen-    *)
    (*  tation in hard or soft copy granted only by written license   *) 
    (*  obtained from the Institute for Information Systems.          *)
    (*                                                                *)
    (******************************************************************)

{
*  Phase 1 opens host and library files and
*  reads in seg tables.  All fields are verified
*  and the hostfile/libfiles file list is built.
*  The prototype final seg table is set up in
*  seginfo[*] from the host file and the sep seg
*  list is set up for searching in later phases.
}

{.fs} { append an extension to a file name if it is not there }
{.fs} { based on EDITOR source }
{.fs} { This is a straight copy from RETROSTUFF so we don't need an extra segment. }
{.fs} PROCEDURE APPENDEXTENSION(VAR FILENAME: STRING; EXT: STRING);
{.fs}   VAR I, XLEN: INTEGER;
{.fs}   FUNCTION UCLC(CH:CHAR):CHAR; (* Map Lower Case to Upper Case *)
{.fs}   BEGIN { from EDITOR source }
{.fs}     IF CH IN ['a'..'z'] THEN UCLC:=CHR(ORD(CH)-32) ELSE UCLC:=CH
{.fs}   END;
{.fs}   FUNCTION ENDSWITH(S, SUFFIX: STRING): BOOLEAN;
{.fs}     VAR I: INTEGER;
{.fs}   BEGIN
{.fs}     I:=POS(SUFFIX,S)-1;
{.fs}     ENDSWITH:=(I>0) AND (I=LENGTH(S)-LENGTH(SUFFIX));
{.fs}   END;
{.fs} BEGIN
{.fs}   IF FILENAME='' THEN EXIT(APPENDEXTENSION);
{.fs}   FOR I:=1 TO LENGTH(FILENAME) DO FILENAME[I]:=UCLC(FILENAME[I]); { up-case }
{.fs}   IF (ENDSWITH(FILENAME,'.LIBRARY')) AND (EXT='.CODE') THEN
{.fs}     EXIT(APPENDEXTENSION);    { .LIBRARY files are also code }
{.fs}   XLEN:=LENGTH(EXT)-1;
{.fs}   IF (NOT ENDSWITH(FILENAME,EXT)) AND                 { tail is not ext }
{.fs}      (FILENAME[LENGTH(FILENAME)]<>'.') AND            { final . inhibits }
{.fs}      (FILENAME[LENGTH(FILENAME)]<>':') THEN           { volume name }
{.fs}     FILENAME:=CONCAT(FILENAME,EXT);
{.fs}   IF FILENAME[LENGTH(FILENAME)]='.' THEN              { remove inhibitor }
{.fs}     DELETE(FILENAME,LENGTH(FILENAME),1);
{.fs} END;

procedure phase1;

  var  { for use with byte flipping }
	 highbyte: 0..1;
	 int: record
		case boolean of
		  TRUE:  (val: integer);
		  FALSE: (byte: packed array [0..1] of 0..255)
	      end;
    {
    *  Build file list opens input code files and reads segtbls.
    *  The var hostfile is set up as head of linked list of file
    *  info recs.  The order of these files determines how id's
    *  will be searched for.  Note that libfiles points at the 
    *  list just past the host file front entry.
    }

    procedure buildfilelist;
      label 1;
      var f: 0..MAXFILE;
	  i: integer;
	  p, q: finfop;
	  fname: string[39];

	{
	*  Setupfile opens file and enters new finfo rec in
	*  hostfile list.  Segtbl is read in and validated.
	}

	procedure setupfile(kind: filekind; title: string);
	  label 1;
	  var errs: integer;
	      s: segindex;
	      cp: filep;
	      fp: finfop;
	      alllinked: boolean;
	      goodkinds: set of segkinds;


	begin { setupfile }
	  new(cp);               { create a file dynamically }
	  moveleft(code, cp^, sizeof(code));  { init new FIB }
{.fs}     if (title <> 'in workspace') then
{.fs}       APPENDEXTENSION(title,'.CODE'); { consistent file extensions }
	  reset(cp^, title);
{.fs#	  if IORESULT <> 0 then                             }
{.fs#	    if title <> 'in workspace' then                 }
{.fs#	      begin                                         }
{.fs#		insert('.CODE', title, length(title)+1);    }
{.fs#		reset(cp^, title)                           }
{.fs#	      end;                                          }
	  if IORESULT <> 0 then
	    begin
	      release(cp); { discard FIB }
	      insert('No file ', title, 1);
	      error(title);
	      if kind <> USERHOST then
		errcount := errcount-1
	    end
	  else
	    begin { file open ok }
	      if talkative then
		writeln('Opening ', title);
	      new(fp);
	      fp^.next := hostfile;
	      fp^.code := cp;
	      fp^.fkind := kind;
	      if blockread(cp^, fp^.segtbl, 1, 0) <> 1 then
		error('segtbl read err')
	      else
		begin { now check segtbl values }
		  if kind = USERHOST then { determine if file is byte-flipped }
		    for s := 0 to MAXSEG do
		    begin
		      int.val := ord(fp^.segtbl.segkind[s]);
		      flipped := (int.byte[highbyte] <> 0);
		      if flipped then
			goto 1;
		    end;
	      1:  if flipped then
		    fliptable(fp^.segtbl);

		  s := 0; alllinked := TRUE;
		  errs := errcount;
		  if kind = USERHOST then
		    goodkinds := [LINKED,SEGPROC,SEPRTSEG,HOSTSEG,UNITSEG]
		  else
		    goodkinds := [LINKED,UNITSEG,SEPRTSEG];

		  with fp^.segtbl do
		    repeat
		      int.val := ord(segkind[s]);
		      if (int.byte[highbyte] <> 0) then
		      begin
			error('bad byte sex'); exit(linker)
		      end;
		      alllinked := alllinked and (segkind[s] = LINKED);
		      if (diskinfo[s].codeleng = 0)
		      and (segkind[s] <> LINKED) then
			if (kind <> USERHOST)
			or (segkind[s] <> UNITSEG) then
			  error('funny code seg');
		      if (diskinfo[s].codeleng < 0)
		      or (diskinfo[s].codeaddr < 0)
		      or (diskinfo[s].codeaddr > 300) then
			error('bad diskinfo');
		      if not (segkind[s] in goodkinds) then
			error('bad seg kind');
		      if not alphabetic(segname[s]) then
			error('bad seg name');
		      if errcount > errs then
			s := MAXSEG;
		      s := s+1
		    until s > MAXSEG;
		  if alllinked and (kind = USERHOST) then
		    begin
		      write('All segs linked');
		      exit(linker)
		    end;
		  if errcount = errs then
		    hostfile := fp            { ok file...link in }
		end
	    end
	end { setupfile } ;

    begin { buildfilelist }
      if talkative then
	begin
	  for i := 1 to 7 do
	    writeln;
	  writeln( HEADER )
	end;
      useworkfile := cmdstate <> SYSPROG;
      with userinfo do
	if useworkfile then
	  begin
	    if gotcode then
	      fname := concat(codevid, ':', codetid)
	    else
	      fname := 'in workspace';
	    setupfile(USERHOST, fname);
	    setupfile(SYSTEMLIB, '*SYSTEM.LIBRARY')
	  end
	else
          begin
	    write('Host file? ');
{.fs}       fname:='..CODE'; fname[1]:=CHR(3); { filename completion }
	    readln(fname);
	    if fname = '' then
	      if gotcode then
		fname := concat(codevid, ':', codetid)
	      else
		fname := 'in workspace';
	    setupfile(USERHOST, fname);
	    if errcount > 0 then
	      exit(linker); { no host! }
	    for f := 1 to MAXFILE do
	      begin
		write('Lib file? ');
{.fs}           fname:='..CODE,.LIBRARY'; fname[1]:=CHR(3); { filename completion }
		readln(fname);
		if fname = '' then
		  goto 1;
		if fname = '*' then
		  setupfile(SYSTEMLIB, '*SYSTEM.LIBRARY')
		else
		  setupfile(USERLIB, fname)
	      end;
	1:
	    write('Map name? ');
{.fs}       mapname:='..TEXT'; mapname[1]:=CHR(3); { filename completion }
	    readln(mapname);
{.fs#	    if mapname <> '' then                           }
{.fs#	      if mapname[length(mapname)] = '.' then        }
{.fs#		delete(mapname, length(mapname), 1)         }
{.fs#	      else                                          }
{.fs#		insert('.TEXT', mapname, length(mapname)+1) }
{.fs}       APPENDEXTENSION(mapname,'.TEXT'); { consistent file extensions }
	  end;

      { now reverse list so host is }
      { first and syslib is last    }

      p := hostfile; hostfile := NIL;
      repeat
	q := p^.next;
	p^.next := hostfile;
	hostfile := p;
	p := q
      until p = NIL;
      libfiles := hostfile^.next;
    end { buildfilelist } ;

    {
    *  Buildseginfo initializes the seginfo table from
    *  the host prototype seg table.  All legal states
    *  are checked, and imported units found.  This
    *  leaves a list of all segs to finally appear in
    *  the output code file.
    }

    procedure buildseginfo;
      label 1;
      var s: segindex;
	  errs: integer;
	  sp: segp;
    begin
      with hostfile^.segtbl do
	for s := 0 to MAXSEG do
	  if (segkind[s] = LINKED)
	  and (diskinfo[s].codeleng = 0) then
	    seginfo[s] := NIL   { not in use }
	  else
	    begin { do something with seg }
	      errs := errcount;
	      new(sp);
	      sp^.srcfile := hostfile;
	      sp^.srcseg := s;
	      sp^.symtab := NIL;
	      sp^.segkind := segkind[s];
	      case sp^.segkind of
		SEGPROC,
		LINKED:    ;  { nothing to check! }

		HOSTSEG:   if s <> MASTERSEG then
			     error('bad host seg')
			   else
			     if hostsp <> NIL then
			       error('dup host seg')
			     else
			       hostsp := sp;

		SEPRTSEG:  if s = MASTERSEG then
			     sp^.next := NIL
			   else
			     begin { put into seplist }
			       sp^.next := seplist;
			       seplist := sp;
			       sp := NIL
			     end;

		UNITSEG:   if diskinfo[s].codeleng = 0 then
			     sp^.srcfile := unitsrch(libfiles,
						    segname[s],
						    sp^.srcseg)
	      end { cases } ;
	      if errs = errcount then
		seginfo[s] := sp
	      else
		seginfo[s] := NIL
	    end;

      { now find first assignable seg }

      for s := FIRSTSEG to MAXSEG do
	if seginfo[s] = NIL then
	  goto 1;
      s := MAXSEG1;
    1:
      nextseg := s;
      if seginfo[MASTERSEG] = NIL then
	error('weird host')
    end { buildseginfo } ;

    {
    *  Buildseplist searches through libraries and adds onto
    *  a global list of sep segs that are to be searched
    *  for procs and globals.  They are initially built in
    *  the reverse order, then reversed again so searches
    *  will go in the order the files were specified.
    }

    procedure buildseplist;
      var sp, p, q: segp;
	  fp: finfop;
	  s: segindex;
    begin
      fp := libfiles;
      while fp <> NIL do
	begin
	  for s := 0 to MAXSEG do
	    if fp^.segtbl.segkind[s] = SEPRTSEG then
	      begin
		new(sp);
		sp^.next := seplist;
		sp^.srcfile := fp;
		sp^.srcseg := s;
		sp^.symtab := NIL;
		sp^.segkind := SEPRTSEG;
		sp^.next := seplist;
		seplist := sp
	      end;
	  fp := fp^.next
	end;

      { now reverse the list to maintain original order }

      p := seplist; seplist := NIL;
      while p <> NIL do
	begin
	  q := p^.next;
	  p^.next := seplist;
	  seplist := p;
	  p := q
	end
    end { buildseplist } ;

begin { phase1 }

  { initialize globals }

  hostfile := NIL;
  libfiles := NIL;
  hostsp := NIL;
  seplist := NIL;
  reflitypes := [UNITREF, GLOBREF, PUBLREF,
		 PRIVREF, CONSTREF,
		 SEPPREF, SEPFREF];
  errcount := 0;
  nextbaselc := 3;
  mapname := '';
  talkative := not userinfo.slowterm;
  mark(heapbase);
  unitwrite(3, heapbase^, 35);

  { determine byte sex of machine }

  flipped := FALSE;
  int.val := 1;
  highbyte := ord( int.byte[0] = 1 );

  { build list of input files }

  buildfilelist;
  if errcount > 0 then
    exit(linker);

  { init basic seg info table }

  buildseginfo;
  if errcount > 0 then
    exit(linker);

  { finally build sep seg list }

  buildseplist;
  if errcount > 0 then
    exit(linker)
end { phase1 } ;
