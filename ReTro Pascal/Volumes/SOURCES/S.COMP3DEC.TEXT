
{.fs} (* --- original source filename: DECPART.B.TEXT --- *)

(*    COPYRIGHT (C) 1979, REGENTS OF THE	*)
(*    UNIVERSITY OF CALIFORNIA, SAN DIEGO	*)

    PROCEDURE USESDECLARATION(MAGIC: BOOLEAN);
      LABEL 1;
      TYPE DCREC = RECORD
		     DISKADDR: INTEGER;
		     CODELENG: INTEGER
		   END;
      VAR SEGDICT: RECORD
		       DANDC: ARRAY[SEGRANGE] OF DCREC;
		       SEGNAME: ARRAY[SEGRANGE] OF ALPHA;
	               SEGKIND: ARRAY[SEGRANGE] OF INTEGER;
		       TEXTADDR: ARRAY[SEGRANGE] OF INTEGER;
		       FILLER: ARRAY[0..127] OF INTEGER
		   END;
	  FOUND: BOOLEAN; BEGADDR: INTEGER;
	  LCP: CTP; LLEXSTK: LEXSTKREC; LNAME: ALPHA;
          LSY: SYMBOL; LOP: OPERATOR; LID: ALPHA;

      PROCEDURE GETTEXT(VAR FOUND: BOOLEAN);
	VAR LCP: CTP; SEGINDEX: INTEGER;

      BEGIN FOUND := FALSE;
	LCP := MODPTR;
	WHILE (LCP <> NIL) AND NOT FOUND DO
	  IF LCP^.NAME = ID THEN FOUND := TRUE ELSE LCP := LCP^.NEXT;
	IF FOUND THEN
	  BEGIN
	    LSEPPROC := SEGTABLE[LCP^.SEGID].SEGKIND = 4;
	    IF NOT LSEPPROC THEN
	      BEGIN SEG := LCP^.SEGID; NEXTPROC := 1 END;
	    BEGADDR := SEGTABLE[LCP^.SEGID].TEXTADDR;
	    USEFILE := WORKCODE;
	  END
	ELSE
	  BEGIN FOUND := TRUE;
	    IF LIBNOTOPEN THEN
	      BEGIN RESET(LIBRARY,SYSTEMLIB);
		IF IORESULT <> 0 THEN BEGIN ERROR(187); FOUND := FALSE END
		ELSE
		  IF BLOCKREAD(LIBRARY,SEGDICT,1,0) <> 1 THEN
		    BEGIN ERROR(187); FOUND := FALSE END;
	      END;
	    IF FOUND THEN
	      BEGIN LIBNOTOPEN := FALSE;
		SEGINDEX := 0; FOUND := FALSE;
		WHILE (SEGINDEX <= MAXSEG) AND (NOT FOUND) DO
		  IF MAGIC THEN
		      IF SEGDICT.SEGNAME[SEGINDEX] = LNAME THEN FOUND := TRUE
		      ELSE SEGINDEX := SEGINDEX + 1
		  ELSE
		    IF SEGDICT.SEGNAME[SEGINDEX] = ID THEN FOUND := TRUE
		    ELSE SEGINDEX := SEGINDEX + 1;
		IF FOUND THEN
		  BEGIN USEFILE := SYSLIBRARY;
		    BEGADDR := SEGDICT.TEXTADDR[SEGINDEX];
		    LSEPPROC := SEGDICT.SEGKIND[SEGINDEX] = 4;
		    IF NOT LSEPPROC THEN
		      BEGIN
			IF MAGIC THEN SEG := 6
			ELSE
			  BEGIN SEG := NEXTSEG;
			    NEXTSEG := NEXTSEG + 1;
			    IF NEXTSEG > MAXSEG THEN ERROR(250)
			  END;
			WITH SEGTABLE[SEG] DO
			  BEGIN DISKADDR := 0; CODELENG := 0;
			    SEGNAME := SEGDICT.SEGNAME[SEGINDEX];
			    IF INMODULE OR MAGIC THEN SEGKIND := 0
			    ELSE SEGKIND := SEGDICT.SEGKIND[SEGINDEX];
			    TEXTADDR := 0
			  END;
			NEXTPROC := 1
		      END
		  END
		ELSE ERROR(190) (*NOT IN LIBRARY*)
	      END
	  END;
	IF BEGADDR = 0 THEN BEGIN ERROR(195); FOUND := FALSE END;
	IF FOUND THEN
	  BEGIN
	    USING := TRUE;
	    PREVSYMCURSOR := SYMCURSOR;
	    PREVLINESTART := LINESTART;
	    PREVSYMBLK := SYMBLK - 2;
	    SYMBLK := BEGADDR; GETNEXTPAGE;
	    INSYMBOL
	  END
      END (*GETTEXT*) ;

    BEGIN (*USESDECLARATION*)
      IF LEVEL <> 1 THEN ERROR(189);
      IF INMODULE AND NOT ININTERFACE THEN ERROR(192);
      IF NOT MAGIC THEN DLINKERINFO := TRUE;
      IF NOT USING THEN USINGLIST := NIL; 
      REPEAT
	IF (NOT MAGIC) AND (SY <> IDENT) THEN ERROR(2)
	ELSE
	  IF USING THEN
	    BEGIN LCP := USINGLIST;
	      WHILE LCP <> NIL DO
		IF LCP^.NAME = ID THEN GOTO 1
		ELSE LCP := LCP^.NEXT;
	      ERROR(188)(*UNIT MUST BE PREDECLARED IN MAIN PROG*);
	  1:
	    END
	  ELSE
	    BEGIN
	      IF MAGIC THEN
		BEGIN LNAME := 'TURTLE  ';
		  LSY := SY; LOP := OP; LID := ID
		END
	      ELSE
		BEGIN LNAME := ID;
		  WRITELN(OUTPUT); WRITELN(OUTPUT,ID,' [',MEMAVAIL:5,' words]');
		  WRITE(OUTPUT,'<',SCREENDOTS:4,'>')
		END;
	      WITH LLEXSTK DO
		BEGIN DOLDSEG := SEG; SOLDPROC := NEXTPROC END;
	      GETTEXT(FOUND);
	      IF FOUND THEN 
		BEGIN
		  NEW(LCP,MODULE);
		  WITH LCP^ DO
		    BEGIN NAME := LNAME; NEXT := USINGLIST;
		      IDTYPE := NIL; KLASS := MODULE;
		      IF LSEPPROC THEN SEGID := -1 (*NO SEG*) ELSE SEGID := SEG
		    END;
		  ENTERID(LCP);
		  USINGLIST := LCP;
		  DECLARATIONPART(FSYS + [ENDSY]);
		  IF NEXTPROC=1 (*NO PROCS DECLARED*) THEN
		    LCP^.SEGID := -1; (*NO SEG*)
		  SYMBLK := 9999; (*FORCE RETURN TO SOURCEFILE*)
		  GETNEXTPAGE
		END;
	      IF NOT LSEPPROC THEN
		WITH LLEXSTK DO
		  BEGIN SEG := DOLDSEG;
		    NEXTPROC := SOLDPROC
		  END;
	      LSEPPROC := FALSE;
	    END;
	IF NOT MAGIC THEN
	  BEGIN INSYMBOL;
	    TEST := SY <> COMMA;
	    IF TEST THEN 
	      IF SY <> SEMICOLON THEN ERROR(20)
	      ELSE
	    ELSE INSYMBOL
	  END
      UNTIL TEST OR MAGIC;
      IF NOT MAGIC THEN
	IF SY = SEMICOLON THEN INSYMBOL ELSE ERROR(14)
      ELSE BEGIN SY := LSY; OP := LOP; ID := LID END;
      IF NOT USING THEN
        BEGIN
	  IF INMODULE THEN USINGLIST := NIL;
	  CLOSE(LIBRARY,LOCK);
	  LIBNOTOPEN := TRUE
	END
    END (*USESDECLARATION*) ;

    PROCEDURE LABELDECLARATION;
      VAR LLP: LABELP; REDEF: BOOLEAN;
    BEGIN
      REPEAT
	IF SY = INTCONST THEN
	  WITH DISPLAY[TOP] DO
	    BEGIN LLP := FLABEL; REDEF := FALSE;
	      WHILE (LLP <> NIL) AND NOT REDEF DO
		IF LLP^.LABVAL <> VAL.IVAL THEN
		  LLP := LLP^.NEXTLAB
		ELSE BEGIN REDEF := TRUE; ERROR(166) END;
	      IF NOT REDEF THEN
		BEGIN NEW(LLP);
		  WITH LLP^ DO
		    BEGIN LABVAL := VAL.IVAL;
		      CODELBP := NIL; NEXTLAB := FLABEL
		    END;
		  FLABEL := LLP
		END;
	      INSYMBOL
	    END
	ELSE ERROR(15);
	IF NOT ( SY IN FSYS + [COMMA, SEMICOLON] ) THEN
	  BEGIN ERROR(6); SKIP(FSYS+[COMMA,SEMICOLON]) END;
	TEST := SY <> COMMA;
	IF NOT TEST THEN INSYMBOL
      UNTIL TEST;
      IF SY = SEMICOLON THEN INSYMBOL ELSE ERROR(14)
    END (* LABELDECLARATION *) ;
  
    PROCEDURE CONSTDECLARATION;
      VAR LCP: CTP; LSP: STP; LVALU: VALU;
    BEGIN
      IF SY <> IDENT THEN
	BEGIN ERROR(2); SKIP(FSYS + [IDENT]) END;
      WHILE SY = IDENT DO
	BEGIN NEW(LCP,KONST);
	  WITH LCP^ DO
	    BEGIN NAME := ID; IDTYPE := NIL;
	      NEXT := NIL; KLASS := KONST
	    END;
	  INSYMBOL;
	  IF (SY = RELOP) AND (OP = EQOP) THEN INSYMBOL ELSE ERROR(16);
	  CONSTANT(FSYS + [SEMICOLON],LSP,LVALU);
	  ENTERID(LCP);
	  LCP^.IDTYPE := LSP; LCP^.VALUES := LVALU;
	  IF SY = SEMICOLON THEN
	    BEGIN INSYMBOL;
	      IF NOT (SY IN FSYS + [IDENT]) THEN
		BEGIN ERROR(6); SKIP(FSYS + [IDENT]) END
	    END
	  ELSE
	    IF NOT ((SY = ENDSY) AND (INMODULE)) THEN ERROR(14)
	END
    END (*CONSTDECLARATION*) ;
  
    PROCEDURE TYPEDECLARATION;
      VAR LCP,LCP1,LCP2: CTP; LSP: STP; LSIZE: ADDRRANGE;
    BEGIN
      IF SY <> IDENT THEN
	BEGIN ERROR(2); SKIP(FSYS + [IDENT]) END;
      WHILE SY = IDENT DO
	BEGIN NEW(LCP,TYPES);
	  WITH LCP^ DO
	    BEGIN NAME := ID; IDTYPE := NIL; KLASS := TYPES END;
	  INSYMBOL;
	  IF (SY = RELOP) AND (OP = EQOP) THEN INSYMBOL ELSE ERROR(16);
	  TYP(FSYS + [SEMICOLON],LSP,LSIZE);
	  ENTERID(LCP);
	  LCP^.IDTYPE := LSP;
	  LCP1 := FWPTR;
	  WHILE LCP1 <> NIL DO
	    BEGIN
	      IF LCP1^.NAME = LCP^.NAME THEN
		BEGIN
		  LCP1^.IDTYPE^.ELTYPE := LCP^.IDTYPE;
		  IF LCP1 <> FWPTR THEN
		    LCP2^.NEXT := LCP1^.NEXT
		  ELSE FWPTR := LCP1^.NEXT;
		END;
	      LCP2 := LCP1; LCP1 := LCP1^.NEXT
	    END;
	  IF SY = SEMICOLON THEN
	    BEGIN INSYMBOL;
	      IF NOT (SY IN FSYS + [IDENT]) THEN
		BEGIN ERROR(6); SKIP(FSYS + [IDENT]) END
	    END
	  ELSE
	    IF NOT ((SY = ENDSY) AND (INMODULE)) THEN ERROR(14)
	END;
      IF FWPTR <> NIL THEN
	BEGIN ERROR(117); FWPTR := NIL END
    END (*TYPEDECLARATION*) ;
  
    PROCEDURE VARDECLARATION;
      VAR LCP,NXT,IDLIST: CTP; LSP: STP; LSIZE: ADDRRANGE;
    BEGIN NXT := NIL;
      REPEAT
	REPEAT
	  IF SY = IDENT THEN
	    BEGIN
	      IF INMODULE THEN NEW(LCP,ACTUALVARS,TRUE)
	      ELSE NEW(LCP,ACTUALVARS,FALSE);
	      WITH LCP^ DO
	       BEGIN NAME := ID; NEXT := NXT; KLASS := ACTUALVARS;
		 IDTYPE := NIL; VLEV := LEVEL;
	         IF INMODULE THEN
		   IF ININTERFACE THEN PUBLIC := TRUE
		   ELSE PUBLIC := FALSE
	       END;
	      ENTERID(LCP);
	      NXT := LCP;
	      INSYMBOL;
	    END
	  ELSE ERROR(2);
	  IF NOT (SY IN FSYS + [COMMA,COLON] + TYPEDELS) THEN
	    BEGIN ERROR(6); SKIP(FSYS+[COMMA,COLON,SEMICOLON]+TYPEDELS) END;
	  TEST := SY <> COMMA;
	  IF NOT TEST THEN INSYMBOL
	UNTIL TEST;
	IF SY = COLON THEN INSYMBOL ELSE ERROR(5);
	IDLIST := NXT;
	TYP(FSYS + [SEMICOLON] + TYPEDELS,LSP,LSIZE);
	WHILE NXT <> NIL DO
	  WITH  NXT^ DO
	    BEGIN IDTYPE := LSP; VADDR := LC;
	      LC := LC + LSIZE; NXT := NEXT;
	      IF NEXT = NIL THEN
		IF LSP <> NIL THEN
		  IF LSP^.FORM = FILES THEN
		      BEGIN (*PUT IDLIST INTO LOCAL FILE LIST*)
			NEXT := DISPLAY[TOP].FFILE;
			DISPLAY[TOP].FFILE := IDLIST
		      END
	    END;
	IF SY = SEMICOLON THEN
	  BEGIN INSYMBOL;
	    IF NOT (SY IN FSYS + [IDENT]) THEN
	      BEGIN ERROR(6); SKIP(FSYS + [IDENT]) END
	  END
	ELSE
	    IF NOT ((SY = ENDSY) AND (INMODULE)) THEN ERROR(14)
      UNTIL (SY <> IDENT) AND NOT (SY IN TYPEDELS);
    IF FWPTR <> NIL THEN
	BEGIN ERROR(117); FWPTR := NIL END
    END (*VARDECLARATION*) ;

{.fs} (* --- original source filename: DECPART.C.TEXT --- *)

(*    COPYRIGHT (C) 1979, REGENTS OF THE	*)
(*    UNIVERSITY OF CALIFORNIA, SAN DIEGO	*)

    PROCEDURE PROCDECLARATION(FSY: SYMBOL; SEGDEC: BOOLEAN);
      VAR LSY: SYMBOL; LCP,LCP1: CTP; LSP: STP;
	  EXTONLY,FORW: BOOLEAN; 
	  LCM: ADDRRANGE;  
          LLEXSTK: LEXSTKREC;

      PROCEDURE PARAMETERLIST(FSY: SETOFSYS; VAR FPAR: CTP; FCP: CTP);
	VAR LCP,LCP1,LCP2,LCP3: CTP; LSP: STP; LKIND: IDKIND;
	  LLC,LEN : ADDRRANGE; COUNT : INTEGER;
      BEGIN LCP1 := NIL; LLC := LC;
	IF NOT (SY IN FSY + [LPARENT]) THEN
	  BEGIN ERROR(7); SKIP(FSYS + FSY + [LPARENT]) END;
	IF SY = LPARENT THEN
	  BEGIN IF FORW THEN ERROR(119);
	    INSYMBOL;
	    IF NOT (SY IN [IDENT,VARSY]) THEN
	      BEGIN ERROR(7); SKIP(FSYS + [IDENT,RPARENT]) END;
	    WHILE SY IN [IDENT,VARSY] DO
	      BEGIN
		IF SY = VARSY THEN
		  BEGIN LKIND := FORMAL; INSYMBOL END
		ELSE LKIND := ACTUAL;
		LCP2 := NIL;
		COUNT := 0;
		REPEAT
		  IF SY <> IDENT THEN ERROR(2)
		  ELSE
		    BEGIN
		      NEW(LCP,FORMALVARS,FALSE); (*MAY BE ACTUAL(SAME SIZE)*)
		      WITH LCP^ DO
			BEGIN NAME := ID; IDTYPE := NIL; NEXT := LCP2;
			  IF LKIND = FORMAL THEN KLASS := FORMALVARS
			  ELSE KLASS := ACTUALVARS; VLEV := LEVEL
			END;
		      ENTERID(LCP);
		      LCP2 := LCP; COUNT := COUNT + 1;
		      INSYMBOL
		    END;
		  IF NOT (SY IN FSYS + [COMMA,SEMICOLON,COLON]) THEN
		    BEGIN ERROR(7);
		      SKIP(FSYS + [COMMA,SEMICOLON,RPARENT,COLON])
		    END;
		  TEST := SY <> COMMA;
		  IF NOT TEST THEN INSYMBOL
		UNTIL TEST;
		LSP := NIL;
		IF SY = COLON THEN
		  BEGIN INSYMBOL;
		    IF SY = IDENT THEN
		      BEGIN
			SEARCHID([TYPES],LCP);
			INSYMBOL;
			LSP := LCP^.IDTYPE;
			LEN := PTRSIZE;
			IF LSP <> NIL THEN
			  IF LKIND = ACTUAL THEN
			    IF LSP^.FORM = FILES THEN ERROR(121)
			    ELSE
			      IF LSP^.FORM <= POWER THEN LEN := LSP^.SIZE;
			LC := LC + COUNT * LEN
		      END
		    ELSE ERROR(2)
		  END
		ELSE
		  IF LKIND = FORMAL THEN
{.fs}               { we must be able to say PROCECURE(VAR X) for TURTLEGRAPHICS }
{.fs}               IF SYSCOMP THEN BEGIN
{.fs}		      LSP := INTPTR;    { treat it as VAR X: INTEGER }
{.fs}		      LEN := LSP^.SIZE;
{.fs}		      LC := LC + COUNT * LEN
{.fs}               END ELSE
		    EXTONLY := TRUE
		  ELSE ERROR(5);
		IF NOT (SY IN FSYS + [SEMICOLON,RPARENT]) THEN
		  BEGIN ERROR(7); SKIP(FSYS + [SEMICOLON,RPARENT]) END;
		LCP3 := LCP2; LCP := NIL;
		WHILE LCP2 <> NIL DO
		  BEGIN LCP := LCP2;
		    WITH LCP2^ DO
		      BEGIN IDTYPE := LSP;
			LCP2 := NEXT
		      END
		  END;
		IF LCP <> NIL THEN
		  BEGIN LCP^.NEXT := LCP1; LCP1 := LCP3 END;
		IF SY = SEMICOLON THEN
		  BEGIN INSYMBOL;
		    IF NOT (SY IN FSYS + [IDENT,VARSY]) THEN
		      BEGIN ERROR(7); SKIP(FSYS + [IDENT,RPARENT]) END
		  END
	      END (*WHILE*) ;
	    IF SY = RPARENT THEN
	      BEGIN INSYMBOL;
		IF NOT (SY IN FSY + FSYS) THEN
		  BEGIN ERROR(6); SKIP(FSY + FSYS) END
	      END
	    ELSE ERROR(4);
	    FCP^.LOCALLC := LC; LCP3 := NIL;
	    WHILE LCP1 <> NIL DO
	      WITH LCP1^ DO
		BEGIN LCP2 := NEXT; NEXT := LCP3;
		  IF (IDTYPE <> NIL) THEN
		    IF KLASS = FORMALVARS THEN
		      BEGIN VADDR := LLC; LLC := LLC + PTRSIZE END
		    ELSE
		      IF KLASS = ACTUALVARS THEN
			IF (IDTYPE^.FORM <= POWER) THEN
			  BEGIN VADDR := LLC; LLC := LLC + IDTYPE^.SIZE END
			ELSE
			  BEGIN VADDR := LC;
			    LC := LC + IDTYPE^.SIZE;
			    LLC := LLC + PTRSIZE
			  END;
		  LCP3 := LCP1; LCP1 := LCP2
		END;
	    FPAR := LCP3
	  END
	    ELSE FPAR := NIL
    END (*PARAMETERLIST*) ;
  
    BEGIN (*PROCDECLARATION*)
      IF SEGDEC THEN (* SEGMENT DECLARATION *)
	BEGIN
	  IF CODEINSEG THEN 
	    BEGIN ERROR(399); SEGINX:=0; CURBYTE:=0; END;
	  WITH LLEXSTK DO
	    BEGIN
	      DOLDSEG:=SEG;
	      SEG:=NEXTSEG;
	      SOLDPROC:=NEXTPROC;
	    END;
	  NEXTPROC:=1;
	  LSY:=SY;
	  IF SY IN [PROCSY,FUNCSY] THEN INSYMBOL
	  ELSE BEGIN ERROR(399); LSY:=PROCSY END;
	  FSY:=LSY;
	END;
      LLEXSTK.DLLC := LC; LC := LCAFTERMARKSTACK;
      IF FSY = FUNCSY THEN LC := LC + REALSIZE;
      LINEINFO := LC; DP := TRUE; EXTONLY := FALSE;
      IF SY = IDENT THEN
	BEGIN
	  IF USING OR INMODULE AND ININTERFACE THEN FORW := FALSE
	  ELSE
	    BEGIN SEARCHSECTION(DISPLAY[TOP].FNAME,LCP);
	      IF LCP <> NIL THEN
		BEGIN
		  IF LCP^.KLASS = PROC THEN
		    FORW := LCP^.FORWDECL AND (FSY = PROCSY)
			    AND (LCP^.PFKIND = ACTUAL)
		  ELSE
		    IF LCP^.KLASS = FUNC THEN
		      FORW := LCP^.FORWDECL AND (FSY = FUNCSY)
			      AND (LCP^.PFKIND = ACTUAL)
		    ELSE FORW := FALSE;
		  IF NOT FORW THEN ERROR(160)
		END
	      ELSE FORW := FALSE
	    END;
	  IF NOT FORW THEN
	    BEGIN
	      IF FSY = PROCSY THEN
		IF INMODULE THEN NEW(LCP,PROC,DECLARED,ACTUAL,TRUE)
	        ELSE NEW(LCP,PROC,DECLARED,ACTUAL,FALSE)
	      ELSE
		IF INMODULE THEN NEW(LCP,FUNC,DECLARED,ACTUAL,TRUE)
	        ELSE NEW(LCP,FUNC,DECLARED,ACTUAL,FALSE);
	      WITH LCP^ DO
		BEGIN NAME := ID; IDTYPE := NIL; LOCALLC := LC;
		  PFDECKIND := DECLARED; PFKIND := ACTUAL;
		  INSCOPE := FALSE; PFLEV := LEVEL;
		  PFNAME := NEXTPROC; PFSEG := SEG;
		  IF USING THEN PROCTABLE[NEXTPROC] := 0;
		  IF INMODULE THEN
		    IF USING THEN IMPORTED := TRUE
		    ELSE IMPORTED := FALSE;
		  IF SEGDEC THEN
		    BEGIN
		      IF NEXTSEG > MAXSEG THEN ERROR(250);
		      NEXTSEG := NEXTSEG+1;
		      SEGTABLE[SEG].SEGNAME := ID
		    END;
		  IF NEXTPROC = MAXPROCNUM THEN ERROR(251)
		  ELSE NEXTPROC := NEXTPROC + 1;
		  IF FSY = PROCSY THEN KLASS := PROC
		  ELSE KLASS := FUNC
		END;
	      ENTERID(LCP)
	    END
	  ELSE
	    BEGIN LCP1 := LCP^.NEXT;
	      WHILE LCP1 <> NIL DO
		BEGIN
		  WITH LCP1^ DO
		    IF IDTYPE = NIL THEN
		      EXTONLY := TRUE
		    ELSE
		      IF KLASS = FORMALVARS THEN
			BEGIN
			  LCM := VADDR + PTRSIZE;
			  IF LCM > LC THEN LC := LCM
			END
		      ELSE
			IF KLASS = ACTUALVARS THEN
			  BEGIN
			    LCM := VADDR + IDTYPE^.SIZE;
			    IF LCM > LC THEN LC := LCM
			  END;
		  LCP1 := LCP1^.NEXT
		END;
	      IF SEG <> LCP^.PFSEG THEN
		BEGIN
		  SEG := LCP^.PFSEG; NEXTPROC := 2;
		  IF NOT SEGDEC THEN ERROR(399)
		END
	    END;
	  INSYMBOL
	END
      ELSE
	BEGIN ERROR(2); LCP := UPRCPTR END;
      WITH LLEXSTK DO
	BEGIN DOLDLEV:=LEVEL; 
	  DOLDTOP:=TOP; 
	  POLDPROC:=CURPROC; 
          DFPROCP:=LCP;
	END;
      CURPROC := LCP^.PFNAME;
      IF LEVEL < MAXLEVEL THEN LEVEL := LEVEL + 1 ELSE ERROR(251);
      IF TOP < DISPLIMIT THEN
	BEGIN TOP := TOP + 1;
	  WITH DISPLAY[TOP] DO
	    BEGIN
	      IF FORW THEN FNAME := LCP^.NEXT
	      ELSE FNAME := NIL;
	      FLABEL := NIL; FFILE := NIL; OCCUR := BLCK
	    END
	END
      ELSE ERROR(250);
      IF FSY = PROCSY THEN
	BEGIN PARAMETERLIST([SEMICOLON],LCP1,LCP);
	  IF NOT FORW THEN LCP^.NEXT := LCP1
	END
      ELSE
	BEGIN PARAMETERLIST([SEMICOLON,COLON],LCP1,LCP);
	  IF NOT FORW THEN LCP^.NEXT := LCP1;
	  IF SY = COLON THEN
	    BEGIN INSYMBOL;
	      IF SY = IDENT THEN
		BEGIN IF FORW THEN ERROR(122);
		  SEARCHID([TYPES],LCP1);
		  LSP := LCP1^.IDTYPE;
		  LCP^.IDTYPE := LSP;
		  IF LSP <> NIL THEN
		    IF NOT (LSP^.FORM IN [SCALAR,SUBRANGE,POINTER]) THEN
		      BEGIN ERROR(120); LCP^.IDTYPE := NIL END;
		  INSYMBOL
		END
	      ELSE BEGIN ERROR(2); SKIP(FSYS + [SEMICOLON]) END
	    END
	  ELSE
	    IF NOT FORW THEN ERROR(123)
	END;
      IF SY = SEMICOLON THEN INSYMBOL ELSE ERROR(14);
      LCP^.EXTURNAL := FALSE;
      IF (SY = EXTERNLSY)
	 OR ((USING) AND (LSEPPROC)) THEN
	BEGIN
	  IF LEVEL <> 2 THEN
	    ERROR(183) (*EXTERNAL PROCS MUST BE IN OUTERMOST BLOCK*);
	  IF INMODULE THEN
	    IF ININTERFACE AND NOT USING THEN
	      ERROR(184); (*NO EXTERNAL DECL IN INTERFACE*)
	  IF SEGDEC THEN ERROR(399);
	  WITH LCP^ DO
	    BEGIN EXTURNAL := TRUE; FORWDECL := FALSE;
	      WRITELN(OUTPUT); WRITELN(OUTPUT,NAME,' [',MEMAVAIL:5,' words]');
	      WRITE(OUTPUT,'<',SCREENDOTS:4,'>')
	    END;
	  PROCTABLE[CURPROC] := 0;
	  DLINKERINFO := TRUE;
	  IF SY = EXTERNLSY THEN
	    BEGIN INSYMBOL;
	      IF SY = SEMICOLON THEN INSYMBOL ELSE ERROR(14);
	      IF NOT (SY IN FSYS) THEN
		BEGIN ERROR(6); SKIP(FSYS) END
	    END
	END
      ELSE
	IF USING THEN
	  BEGIN LCP^.FORWDECL := FALSE;
	  END
	ELSE
	  IF (SY = FORWARDSY) OR INMODULE AND ININTERFACE THEN
	    BEGIN
	      IF FORW THEN ERROR(161)
	      ELSE LCP^.FORWDECL := TRUE;
	      IF SY = FORWARDSY THEN 
		BEGIN INSYMBOL;
		  IF SY = SEMICOLON THEN INSYMBOL ELSE ERROR(14)
		END;
	      IF NOT (SY IN FSYS) THEN
		BEGIN ERROR(6); SKIP(FSYS) END
	    END
	  ELSE
	    BEGIN 
	      IF EXTONLY THEN
		ERROR(7);
	      NEWBLOCK:=TRUE;
	      NOTDONE:=TRUE;
	      WITH LLEXSTK DO
		BEGIN 
		  MARK(DMARKP);
		  WITH LCP^ DO
		    BEGIN FORWDECL := FALSE; INSCOPE := TRUE;
		      EXTURNAL := FALSE END;
		  BFSY:=SEMICOLON;
		  ISSEGMENT:=SEGDEC;
		  PREVLEXSTACKP:=TOS;
		 END;
	      NEW(TOS);
	      TOS^:=LLEXSTK;
	      EXIT(PROCDECLARATION);
	    END;
      WITH LLEXSTK DO  (* FORWARD OR EXTERNAL DECLARATION, SO RESTORE STATE *)
	BEGIN 
	  LEVEL:=DOLDLEV; 
	  TOP:=DOLDTOP;
	  LC:=DLLC; 
	  CURPROC:=POLDPROC; 
	  IF SEGDEC THEN
	    BEGIN
	      NEXTPROC:=SOLDPROC;
	      SEG:=DOLDSEG;
	    END;
	END;
     END; (* PROCDECLARATION *)


  BEGIN (*DECLARATIONPART*)
    IF (NOSWAP) AND (STARTINGUP) THEN
      BEGIN
	STARTINGUP:=FALSE; (* ALL SEGMENTS ARE IN BY THIS TIME *)
	BLOCK(FSYS);
	EXIT(DECLARATIONPART);
      END;
    IF NOISY THEN
      UNITWRITE(3,DUMMYVAR[-1600],35); (*ADJUST DISPLAY OF STACK AND HEAP*)
    REPEAT
      NOTDONE:=FALSE;
      IF USERINFO.STUPID THEN
	IF NOT CODEINSEG THEN
	  IF (LEVEL = 1) AND (NEXTSEG = 10) THEN
	    IF NOT(INMODULE OR USING) THEN USESDECLARATION(TRUE);
	    (*To get turtle graphics*)
      IF SY = USESSY THEN
	BEGIN INSYMBOL; USESDECLARATION(FALSE) END;
      IF SY = LABELSY THEN
	BEGIN
	  IF INMODULE AND ININTERFACE THEN
	    BEGIN ERROR(186); SKIP(FSYS - [LABELSY]) END
	  ELSE INSYMBOL; LABELDECLARATION END;
      IF SY = CONSTSY THEN
	BEGIN INSYMBOL; CONSTDECLARATION END;
      IF SY = TYPESY THEN
	BEGIN INSYMBOL; TYPEDECLARATION END;
      IF SY = VARSY THEN
	BEGIN INSYMBOL; VARDECLARATION END;
      IF LEVEL = 1 THEN GLEV := TOP;
      IF SY IN [PROCSY,FUNCSY,PROGSY] THEN
	BEGIN
	  IF INMODULE THEN
	    IF ININTERFACE AND NOT USING THEN PUBLICPROCS := TRUE;
	  REPEAT
	    LSY := SY; INSYMBOL;
	    IF LSY = PROGSY THEN
	      IF INMODULE THEN
		BEGIN ERROR(185 (*SEG DEC NOT ALLOWED IN UNIT*));
		  PROCDECLARATION(PROCSY,FALSE)
		END
	      ELSE PROCDECLARATION(LSY,TRUE)
	    ELSE PROCDECLARATION(LSY,FALSE);
	  UNTIL NOT (SY IN [PROCSY,FUNCSY,PROGSY])
	END;
      IF (SY <> BEGINSY) THEN
       IF NOT ((USING OR INMODULE) AND (SY IN [IMPLESY,ENDSY]))
	  AND NOT( SY IN [SEPARATSY,UNITSY]) THEN
	 IF (NOT (INCLUDING OR NOTDONE))
	    OR
	    NOT(SY IN BLOCKBEGSYS) THEN
	   BEGIN ERROR(18); SKIP(FSYS - [UNITSY,INTERSY]); END;
    UNTIL (SY IN (STATBEGSYS + [SEPARATSY,UNITSY,IMPLESY,ENDSY]));
    NEWBLOCK:=FALSE; 
  END (*DECLARATIONPART*) ;
