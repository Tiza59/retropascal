{This is an unpublished work copyright by the Regents of
   the University of California. This item is the property of SofTech
   Microsystems Inc., and it may be used, copied or distributed only
   as permitted in a written license from that company.}



(************************************************************************)




PROCEDURE EQUPOWRNEQPOWR;
BEGIN
  CHK(INIT);

  DESCRIPTION('EQUPOWR [0,9,13,17]=[0,9,13,17]');
  CHK([0,9,13,17]=[0,9,13,17]);

  DESCRIPTION('EQUPOWR [0,9,13,17,34]=[0,9,13,17]');
  CHK(NOT([0,9,13,17]=[0,9,13,17,34]));

  DESCRIPTION('EQUPOWR [0,9,13,17,34]=[0,9,13,17]');
  CHK(NOT([0,9,13,17,34]=[0,9,13,17]));

  DESCRIPTION('EQUPOWR [0]=[1]');
  CHK(NOT([0]=[1]));

  DESCRIPTION('EQUPOWR []=[]');
  CHK([]=[]);

  DESCRIPTION('EQUPOWR []=[3]');
  CHK(NOT([]=[3]));

  DESCRIPTION('EQUPOWR [5]=[]');
  CHK(NOT([5]=[]));

  DESCRIPTION('EQUPOWR [1,7,10]=[17,23,26]');
  CHK(NOT([1,7,10]=[17,23,26]));

  DESCRIPTION('EQUPOWR [17,23,26]=[1,7,10]');
  CHK(NOT([17,23,26]=[1,7,10]));


  DESCRIPTION('NEQPOWR [0,9,13,17]<>[0,9,13,17]');
  CHK(NOT([0,9,13,17]<>[0,9,13,17]));

  DESCRIPTION('NEQPOWR [0,9,13,17]<>[0,9,13,17,34]');
  CHK([0,9,13,17]<>[0,9,13,17,34]);

  DESCRIPTION('NEQPOWR [0,9,13,17,34]<>[0,9,13,17]');
  CHK([0,9,13,17,34]<>[0,9,13,17]);

  DESCRIPTION('NEQPOWR [0]<>[1]');
  CHK([0]<>[1]);

  DESCRIPTION('NEQPOWR []<>[]');
  CHK(NOT([]<>[]));

  DESCRIPTION('NEQPOWR []<>[3]');
  CHK([]<>[3]);

  DESCRIPTION('NEQPOWR [5]<>[]');
  CHK([5]<>[]);

  DESCRIPTION('NEQPOWR [1,7,10]<>[17,23,26]');
  CHK([1,7,10]<>[17,23,26]);

  DESCRIPTION('NEQPOWR [17,23,26]<>[1,7,10]');
  CHK([17,23,26]<>[1,7,10]);

END;




(************************************************************************)




PROCEDURE GEQPOWRLEQPOWR;
BEGIN
  CHK(INIT);

  DESCRIPTION('GEQPOWR [1,3,7,10]>=[1,3,7,10]');
  CHK([1,3,7,10]>=[1,3,7,10]);

  DESCRIPTION('GEQPOWR [1,4,7,13,37,52]>=[1,4,7,31,37,52]');
  CHK(NOT([1,4,7,13,37,52]>=[1,4,7,31,37,52]));

  DESCRIPTION('GEQPOWR [1,5,12,19,34]>=[1,5,12,19,34]');
  CHK([1,5,12,19,34]>=[1,5,12,19,34]);

  DESCRIPTION('GEQPOWR []>=[]');
  CHK([]>=[]);

  DESCRIPTION('GEQPOWR [1,5]>=[1,5,18]');
  CHK(NOT([1,5]>=[1,5,18]));

  DESCRIPTION('GEQPOWR []>=[1,5]');
  CHK(NOT([]>=[1,5]));

  DESCRIPTION('GEQPOWR [0]>=[]');
  CHK([0]>=[]);

  DESCRIPTION('GEQPOWR [1,5,18]>=[1,5]');
  CHK([1,5,18]>=[1,5]);

  DESCRIPTION('GEQPOWR [1,5,14,21]>=[5,14,21]');
  CHK([1,5,14,21]>=[5,14,21]);


  DESCRIPTION('LEQPOWR [1,3,7,10]<=[1,3,7,10]');
  CHK([1,3,7,10]<=[1,3,7,10]);

  DESCRIPTION('LEQPOWR [1,5,12,19,34]<=[1,5,12,19,34]');
  CHK([1,5,12,19,34]<=[1,5,12,19,34]);

  DESCRIPTION('LEQPOWR []<=[]');
  CHK([]<=[]);

  DESCRIPTION('LEQPOWR [1,5]<=[1,5,18]');
  CHK([1,5]<=[1,5,18]);

  DESCRIPTION('LEQPOWR []<=[1,5]');
  CHK([]<=[1,5]);

  DESCRIPTION('LEQPOWR [1,4,7,31,37,52]<=[1,4,7,31,37]');
  CHK(NOT([1,4,7,31,37,52]<=[1,4,7,31,37]));

  DESCRIPTION('LEQPOWR [0]<=[]');
  CHK(NOT([0]<=[]));

  DESCRIPTION('LEQPOWR [1,5,18]<=[1,5]');
  CHK(NOT([1,5,18]<=[1,5]));

  DESCRIPTION('LEQPOWR [0,5,14,21]<=[5,14,21]');
  CHK(NOT([0,5,14,21]<=[5,14,21]));

END;




(************************************************************************)




PROCEDURE ADJSGSSRS;
VAR SHORTSET:SET OF 0..15;
    BOTH:RECORD CASE BOOLEAN OF
	   TRUE:(MEDSET:SET OF 0..31);
	   FALSE:(HISET,LOSET:INTEGER)
	 END;
    LONGSET:RECORD CASE BOOLEAN OF
	      TRUE:(BIG:SET OF 0..263);
              FALSE:(FILL:ARRAY[1..6] OF INTEGER;
		     INT10,INT9,INT8,INT7:INTEGER);
	    END;
BEGIN
  CHK(INIT);

  BOTH.MEDSET:=[0,4,17,28];
  DESCRIPTION('ADJ which does not change set size  <2word set>:=[0,4,17,28]');
  CHK((BOTH.LOSET=17) AND (BOTH.HISET=4098));
  
  BOTH.MEDSET:=[1,5,9];
  DESCRIPTION('ADJ which expands set    <2word set>:=[1,5,9]');
  CHK((BOTH.LOSET=546) AND (BOTH.HISET=0));
  
  BOTH.MEDSET:=[1,5,9,21,42];
  DESCRIPTION('ADJ which shrinks set    <2word set>:=[1,5,9,21,42]');
  CHK((BOTH.LOSET=546) AND (BOTH.HISET=32));

  LONGSET.BIG:=[131];
  DESCRIPTION('SGS  <10word set>:=[131]');
  CHK((LONGSET.INT9=8) AND (LONGSET.INT8=0));

  BOTH.MEDSET:=[4];
  DESCRIPTION('SGS  <2word set>:=[4]');
  CHK(BOTH.LOSET=16);

  LONGSET.BIG:=[126..131];
  DESCRIPTION('SRS which crosses word bndry   <10word set>:=[126..131]');
  CHK((LONGSET.INT8=-16384) AND (LONGSET.INT9=15));

  LONGSET.BIG:=[128..132];
  DESCRIPTION('SRS starting in lo bits of word <10word set>:=[128..132]');
  CHK((LONGSET.INT8=0) AND (LONGSET.INT9=31));

  LONGSET.BIG:=[139..143];
  DESCRIPTION('SRS up against hi bits of word <10word set>:=[139..143]');
  CHK((LONGSET.INT8=0) AND (LONGSET.INT9=-2048));

  LONGSET.BIG:=[125..150];
  DESCRIPTION('SRS which crosses a few words  <10word set>:=[125..150]');
  CHK((LONGSET.INT8=-8192) AND (LONGSET.INT9=-1) AND (LONGSET.INT10=127));

  LONGSET.BIG:=[135..135];
  DESCRIPTION('SRS one bit long <10word set>:=[135..135]');
  CHK((LONGSET.INT8=0) AND (LONGSET.INT9=128) AND (LONGSET.INT10=0));

  LONGSET.BIG:=[134..133];                {SRS which generates empty set}
  DESCRIPTION('SRS which makes empty set <10word set>:=[134..133]');
  CHK((LONGSET.INT8=0) AND (LONGSET.INT9=0) AND (LONGSET.INT10=0));

END;




(************************************************************************)




PROCEDURE INNUNI;
VAR REGSET:SET OF 0..31;
BEGIN
  CHK(INIT);

  REGSET:=[0,7,13,15,16];

  DESCRIPTION('INN  0 IN [0,7,13,15,16]');
  CHK(0 IN REGSET);

  DESCRIPTION('INN  7 IN [0,7,13,15,16]');
  CHK(7 IN REGSET);

  DESCRIPTION('INN 15 IN [0,7,13,15,16]');
  CHK(15 IN REGSET);

  DESCRIPTION('INN 16 IN [0,7,13,15,16]');
  CHK(16 IN REGSET);

  DESCRIPTION('INN  8 IN [0,7,13,15,16]');
  CHK(NOT(8 IN REGSET));

  DESCRIPTION('INN 32 IN [0,7,13,15,16]');
  CHK(NOT(32 IN REGSET));

  DESCRIPTION('INN 13 IN [0,1]');
  CHK(NOT(13 IN [0,1]));

  DESCRIPTION('INN 1 IN [0,1]');
  CHK(1 IN [0,1]);

  DESCRIPTION('INN  0 IN []');
  CHK(NOT(0 IN []));

  DESCRIPTION('INN 34 IN []');
  CHK(NOT(34 IN []));

  DESCRIPTION('INN -1 IN []');
  CHK(NOT(-1 IN []));

  DESCRIPTION('INN -1 IN [1,5]');
  CHK(NOT(-1 IN [1,5]));

  DESCRIPTION('INN -1 IN [30]');
  CHK(NOT(-1 IN [30]));

  DESCRIPTION('INN 32000 IN [3]');
  CHK(NOT(32000 IN [3]));


  DESCRIPTION('UNI [1,4,15]+[0,1,7]');
  CHK([1,4,15]+[0,1,7]=[0,1,4,7,15]);
  
  DESCRIPTION('UNI [19,23]+[0,18]');
  CHK([19,23]+[0,18]=[0,19,18,23]);

  DESCRIPTION('UNI [1,4,19,43]+[2,5,21]');
  CHK([1,4,19,43]+[2,5,21]=[1,2,4,5,19,21,43]);
  
  DESCRIPTION('UNI [2,5,21]+[1,4,19,43]');
  CHK([2,5,21]+[1,4,19,43]=[1,2,4,5,19,21,43]);
  
  DESCRIPTION('UNI []+[1,4,5,23]');
  CHK([]+[1,4,5,23]=[1,4,5,23]);
  
  DESCRIPTION('UNI [18,23,25]+[]');
  CHK([18,23,25]+[]=[18,23,25]);

  DESCRIPTION('UNI []+[]');
  CHK([]+[]=[]);
  
END;




(************************************************************************)




PROCEDURE DIFINT;
BEGIN
  CHK(INIT);

  DESCRIPTION('DIF [1,3,5,7]-[3,7]');
  CHK([1,3,5,7]-[3,7]=[1,5]);
  
  DESCRIPTION('DIF [1,5,17]-[1,5]');
  CHK([1,5,17]-[1,5]=[17]);
  
  DESCRIPTION('DIF [1,4,19]-[19]');
  CHK([1,4,19]-[19]=[1,4]);
  
  DESCRIPTION('DIF [1,38,65]-[65]');
  CHK([1,38,65]-[65]=[1,38]);
  
  DESCRIPTION('DIF [1,16,19]-[43]');
  CHK([1,16,19]-[43]=[1,16,19]);
  
  DESCRIPTION('DIF [5,9,23]-[2]');
  CHK([5,9,23]-[2]=[5,9,23]);
  
  DESCRIPTION('DIF []-[1,9]');
  CHK([]-[1,9]=[]);
  
  DESCRIPTION('DIF []-[19,35]');
  CHK([]-[19,35]=[]);
  
  DESCRIPTION('DIF []-[]');
  CHK([]-[]=[]);
  
  DESCRIPTION('DIF [1,34]-[]');
  CHK([1,34]-[]=[1,34]);
  
  
  DESCRIPTION('INT [1,3,19]*[1,3,19]');
  CHK([1,3,19]*[1,3,19]=[1,3,19]);
  
  DESCRIPTION('INT [34,35,1,4]*[34,35]');
  CHK([34,45,1,4]*[34,45]=[34,45]);
  
  DESCRIPTION('INT [1,3,6,12]*[2,3,13]');
  CHK([1,3,6,12]*[2,3,13]=[3]);
  
  DESCRIPTION('INT [1,3,12]*[2,5]');
  CHK([1,3,12]*[2,5]=[]);
  
  DESCRIPTION('INT [4,5]*[36,37]');
  CHK([4,5]*[36,37]=[]);
  
  DESCRIPTION('INT [36,37]*[4,5]');
  CHK([36,37]*[4,5]=[]);
  
  DESCRIPTION('INT [1,34]*[]');
  CHK([1,34]*[]=[]);
  
  DESCRIPTION('INT []*[23,43]');
  CHK([]*[23,43]=[]);
  
  DESCRIPTION('INT []*[]');
  CHK([]*[]=[]);

END;




(************************************************************************)





